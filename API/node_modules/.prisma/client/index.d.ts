
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model data_mahasiswa
 */

export type data_mahasiswa = {
  id: number
  nama: string
  nim: string
  email: string
  tanggal_lahir: Date
  No_telp: string
  alamat: string
  Status: string
}

/**
 * Model logbook
 */

export type logbook = {
  id: number
  tanggal: Date
  kegiatan: string
  kendala: string
  solusi: string
  lampiran: string
  logbookId: number
}

/**
 * Model login
 */

export type login = {
  id: number
  user: string
  password: string
  role: string
  userId: number
}

/**
 * Model profil_industri
 */

export type profil_industri = {
  id: number
  Nama_industri: string
  Alamat: string
  Contact_Person: string
  Status: string
}

/**
 * Model daftar_industri
 */

export type daftar_industri = {
  id: number
  Nama_industri: string
  NIM_ketua: string
  NIM_anggota1: string
  NIM_anggota2: string
  Status: string
  Surat_industri: string
  Durasi1: Date
  Durasi2: Date
  Dosen: string
  industriNama: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Data_mahasiswas
 * const data_mahasiswas = await prisma.data_mahasiswa.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Data_mahasiswas
   * const data_mahasiswas = await prisma.data_mahasiswa.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.data_mahasiswa`: Exposes CRUD operations for the **data_mahasiswa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Data_mahasiswas
    * const data_mahasiswas = await prisma.data_mahasiswa.findMany()
    * ```
    */
  get data_mahasiswa(): Prisma.data_mahasiswaDelegate<GlobalReject>;

  /**
   * `prisma.logbook`: Exposes CRUD operations for the **logbook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logbooks
    * const logbooks = await prisma.logbook.findMany()
    * ```
    */
  get logbook(): Prisma.logbookDelegate<GlobalReject>;

  /**
   * `prisma.login`: Exposes CRUD operations for the **login** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logins
    * const logins = await prisma.login.findMany()
    * ```
    */
  get login(): Prisma.loginDelegate<GlobalReject>;

  /**
   * `prisma.profil_industri`: Exposes CRUD operations for the **profil_industri** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profil_industris
    * const profil_industris = await prisma.profil_industri.findMany()
    * ```
    */
  get profil_industri(): Prisma.profil_industriDelegate<GlobalReject>;

  /**
   * `prisma.daftar_industri`: Exposes CRUD operations for the **daftar_industri** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Daftar_industris
    * const daftar_industris = await prisma.daftar_industri.findMany()
    * ```
    */
  get daftar_industri(): Prisma.daftar_industriDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.18.0
   * Query Engine version: da6fafb57b24e0b61ca20960c64e2d41f9e8cff1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    data_mahasiswa: 'data_mahasiswa',
    logbook: 'logbook',
    login: 'login',
    profil_industri: 'profil_industri',
    daftar_industri: 'daftar_industri'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model data_mahasiswa
   */


  export type AggregateData_mahasiswa = {
    count: Data_mahasiswaCountAggregateOutputType | null
    avg: Data_mahasiswaAvgAggregateOutputType | null
    sum: Data_mahasiswaSumAggregateOutputType | null
    min: Data_mahasiswaMinAggregateOutputType | null
    max: Data_mahasiswaMaxAggregateOutputType | null
  }

  export type Data_mahasiswaAvgAggregateOutputType = {
    id: number
  }

  export type Data_mahasiswaSumAggregateOutputType = {
    id: number
  }

  export type Data_mahasiswaMinAggregateOutputType = {
    id: number
    nama: string | null
    nim: string | null
    email: string | null
    tanggal_lahir: Date | null
    No_telp: string | null
    alamat: string | null
    Status: string | null
  }

  export type Data_mahasiswaMaxAggregateOutputType = {
    id: number
    nama: string | null
    nim: string | null
    email: string | null
    tanggal_lahir: Date | null
    No_telp: string | null
    alamat: string | null
    Status: string | null
  }

  export type Data_mahasiswaCountAggregateOutputType = {
    id: number
    nama: number | null
    nim: number | null
    email: number | null
    tanggal_lahir: number | null
    No_telp: number | null
    alamat: number | null
    Status: number | null
    _all: number
  }


  export type Data_mahasiswaAvgAggregateInputType = {
    id?: true
  }

  export type Data_mahasiswaSumAggregateInputType = {
    id?: true
  }

  export type Data_mahasiswaMinAggregateInputType = {
    id?: true
    nama?: true
    nim?: true
    email?: true
    tanggal_lahir?: true
    No_telp?: true
    alamat?: true
    Status?: true
  }

  export type Data_mahasiswaMaxAggregateInputType = {
    id?: true
    nama?: true
    nim?: true
    email?: true
    tanggal_lahir?: true
    No_telp?: true
    alamat?: true
    Status?: true
  }

  export type Data_mahasiswaCountAggregateInputType = {
    id?: true
    nama?: true
    nim?: true
    email?: true
    tanggal_lahir?: true
    No_telp?: true
    alamat?: true
    Status?: true
    _all?: true
  }

  export type Data_mahasiswaAggregateArgs = {
    /**
     * Filter which data_mahasiswa to aggregate.
    **/
    where?: data_mahasiswaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of data_mahasiswas to fetch.
    **/
    orderBy?: Enumerable<data_mahasiswaOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: data_mahasiswaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` data_mahasiswas from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` data_mahasiswas.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned data_mahasiswas
    **/
    count?: true | Data_mahasiswaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Data_mahasiswaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Data_mahasiswaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Data_mahasiswaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Data_mahasiswaMaxAggregateInputType
  }

  export type GetData_mahasiswaAggregateType<T extends Data_mahasiswaAggregateArgs> = {
    [P in keyof T & keyof AggregateData_mahasiswa]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateData_mahasiswa[P]>
      : GetScalarType<T[P], AggregateData_mahasiswa[P]>
  }



  export type data_mahasiswaSelect = {
    id?: boolean
    nama?: boolean
    nim?: boolean
    email?: boolean
    tanggal_lahir?: boolean
    No_telp?: boolean
    alamat?: boolean
    Status?: boolean
    data_mahasiswa?: boolean | loginFindManyArgs
    data_logbook?: boolean | logbookFindManyArgs
  }

  export type data_mahasiswaInclude = {
    data_mahasiswa?: boolean | loginFindManyArgs
    data_logbook?: boolean | logbookFindManyArgs
  }

  export type data_mahasiswaGetPayload<
    S extends boolean | null | undefined | data_mahasiswaArgs,
    U = keyof S
      > = S extends true
        ? data_mahasiswa
    : S extends undefined
    ? never
    : S extends data_mahasiswaArgs | data_mahasiswaFindManyArgs
    ?'include' extends U
    ? data_mahasiswa  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'data_mahasiswa'
        ? Array < loginGetPayload<S['include'][P]>>  :
        P extends 'data_logbook'
        ? Array < logbookGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof data_mahasiswa ?data_mahasiswa [P]
  : 
          P extends 'data_mahasiswa'
        ? Array < loginGetPayload<S['select'][P]>>  :
        P extends 'data_logbook'
        ? Array < logbookGetPayload<S['select'][P]>>  : never
  } 
    : data_mahasiswa
  : data_mahasiswa


  type data_mahasiswaCountArgs = Merge<
    Omit<data_mahasiswaFindManyArgs, 'select' | 'include'> & {
      select?: Data_mahasiswaCountAggregateInputType | true
    }
  >

  export interface data_mahasiswaDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Data_mahasiswa that matches the filter.
     * @param {data_mahasiswaFindUniqueArgs} args - Arguments to find a Data_mahasiswa
     * @example
     * // Get one Data_mahasiswa
     * const data_mahasiswa = await prisma.data_mahasiswa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends data_mahasiswaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, data_mahasiswaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'data_mahasiswa'> extends True ? CheckSelect<T, Prisma__data_mahasiswaClient<data_mahasiswa>, Prisma__data_mahasiswaClient<data_mahasiswaGetPayload<T>>> : CheckSelect<T, Prisma__data_mahasiswaClient<data_mahasiswa | null >, Prisma__data_mahasiswaClient<data_mahasiswaGetPayload<T> | null >>

    /**
     * Find the first Data_mahasiswa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {data_mahasiswaFindFirstArgs} args - Arguments to find a Data_mahasiswa
     * @example
     * // Get one Data_mahasiswa
     * const data_mahasiswa = await prisma.data_mahasiswa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends data_mahasiswaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, data_mahasiswaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'data_mahasiswa'> extends True ? CheckSelect<T, Prisma__data_mahasiswaClient<data_mahasiswa>, Prisma__data_mahasiswaClient<data_mahasiswaGetPayload<T>>> : CheckSelect<T, Prisma__data_mahasiswaClient<data_mahasiswa | null >, Prisma__data_mahasiswaClient<data_mahasiswaGetPayload<T> | null >>

    /**
     * Find zero or more Data_mahasiswas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {data_mahasiswaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Data_mahasiswas
     * const data_mahasiswas = await prisma.data_mahasiswa.findMany()
     * 
     * // Get first 10 Data_mahasiswas
     * const data_mahasiswas = await prisma.data_mahasiswa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const data_mahasiswaWithIdOnly = await prisma.data_mahasiswa.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends data_mahasiswaFindManyArgs>(
      args?: SelectSubset<T, data_mahasiswaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<data_mahasiswa>>, PrismaPromise<Array<data_mahasiswaGetPayload<T>>>>

    /**
     * Create a Data_mahasiswa.
     * @param {data_mahasiswaCreateArgs} args - Arguments to create a Data_mahasiswa.
     * @example
     * // Create one Data_mahasiswa
     * const Data_mahasiswa = await prisma.data_mahasiswa.create({
     *   data: {
     *     // ... data to create a Data_mahasiswa
     *   }
     * })
     * 
    **/
    create<T extends data_mahasiswaCreateArgs>(
      args: SelectSubset<T, data_mahasiswaCreateArgs>
    ): CheckSelect<T, Prisma__data_mahasiswaClient<data_mahasiswa>, Prisma__data_mahasiswaClient<data_mahasiswaGetPayload<T>>>

    /**
     * Delete a Data_mahasiswa.
     * @param {data_mahasiswaDeleteArgs} args - Arguments to delete one Data_mahasiswa.
     * @example
     * // Delete one Data_mahasiswa
     * const Data_mahasiswa = await prisma.data_mahasiswa.delete({
     *   where: {
     *     // ... filter to delete one Data_mahasiswa
     *   }
     * })
     * 
    **/
    delete<T extends data_mahasiswaDeleteArgs>(
      args: SelectSubset<T, data_mahasiswaDeleteArgs>
    ): CheckSelect<T, Prisma__data_mahasiswaClient<data_mahasiswa>, Prisma__data_mahasiswaClient<data_mahasiswaGetPayload<T>>>

    /**
     * Update one Data_mahasiswa.
     * @param {data_mahasiswaUpdateArgs} args - Arguments to update one Data_mahasiswa.
     * @example
     * // Update one Data_mahasiswa
     * const data_mahasiswa = await prisma.data_mahasiswa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends data_mahasiswaUpdateArgs>(
      args: SelectSubset<T, data_mahasiswaUpdateArgs>
    ): CheckSelect<T, Prisma__data_mahasiswaClient<data_mahasiswa>, Prisma__data_mahasiswaClient<data_mahasiswaGetPayload<T>>>

    /**
     * Delete zero or more Data_mahasiswas.
     * @param {data_mahasiswaDeleteManyArgs} args - Arguments to filter Data_mahasiswas to delete.
     * @example
     * // Delete a few Data_mahasiswas
     * const { count } = await prisma.data_mahasiswa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends data_mahasiswaDeleteManyArgs>(
      args?: SelectSubset<T, data_mahasiswaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Data_mahasiswas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {data_mahasiswaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Data_mahasiswas
     * const data_mahasiswa = await prisma.data_mahasiswa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends data_mahasiswaUpdateManyArgs>(
      args: SelectSubset<T, data_mahasiswaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Data_mahasiswa.
     * @param {data_mahasiswaUpsertArgs} args - Arguments to update or create a Data_mahasiswa.
     * @example
     * // Update or create a Data_mahasiswa
     * const data_mahasiswa = await prisma.data_mahasiswa.upsert({
     *   create: {
     *     // ... data to create a Data_mahasiswa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Data_mahasiswa we want to update
     *   }
     * })
    **/
    upsert<T extends data_mahasiswaUpsertArgs>(
      args: SelectSubset<T, data_mahasiswaUpsertArgs>
    ): CheckSelect<T, Prisma__data_mahasiswaClient<data_mahasiswa>, Prisma__data_mahasiswaClient<data_mahasiswaGetPayload<T>>>

    /**
     * Count the number of Data_mahasiswas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {data_mahasiswaCountArgs} args - Arguments to filter Data_mahasiswas to count.
     * @example
     * // Count the number of Data_mahasiswas
     * const count = await prisma.data_mahasiswa.count({
     *   where: {
     *     // ... the filter for the Data_mahasiswas we want to count
     *   }
     * })
    **/
    count<T extends data_mahasiswaCountArgs>(
      args?: Subset<T, data_mahasiswaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Data_mahasiswaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Data_mahasiswa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Data_mahasiswaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Data_mahasiswaAggregateArgs>(args: Subset<T, Data_mahasiswaAggregateArgs>): PrismaPromise<GetData_mahasiswaAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for data_mahasiswa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__data_mahasiswaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    data_mahasiswa<T extends loginFindManyArgs = {}>(args?: Subset<T, loginFindManyArgs>): CheckSelect<T, PrismaPromise<Array<login>>, PrismaPromise<Array<loginGetPayload<T>>>>;

    data_logbook<T extends logbookFindManyArgs = {}>(args?: Subset<T, logbookFindManyArgs>): CheckSelect<T, PrismaPromise<Array<logbook>>, PrismaPromise<Array<logbookGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * data_mahasiswa findUnique
   */
  export type data_mahasiswaFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the data_mahasiswa
    **/
    select?: data_mahasiswaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: data_mahasiswaInclude | null
    /**
     * Throw an Error if a data_mahasiswa can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which data_mahasiswa to fetch.
    **/
    where: data_mahasiswaWhereUniqueInput
  }


  /**
   * data_mahasiswa findFirst
   */
  export type data_mahasiswaFindFirstArgs = {
    /**
     * Select specific fields to fetch from the data_mahasiswa
    **/
    select?: data_mahasiswaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: data_mahasiswaInclude | null
    /**
     * Throw an Error if a data_mahasiswa can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which data_mahasiswa to fetch.
    **/
    where?: data_mahasiswaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of data_mahasiswas to fetch.
    **/
    orderBy?: Enumerable<data_mahasiswaOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for data_mahasiswas.
    **/
    cursor?: data_mahasiswaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` data_mahasiswas from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` data_mahasiswas.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of data_mahasiswas.
    **/
    distinct?: Enumerable<Data_mahasiswaScalarFieldEnum>
  }


  /**
   * data_mahasiswa findMany
   */
  export type data_mahasiswaFindManyArgs = {
    /**
     * Select specific fields to fetch from the data_mahasiswa
    **/
    select?: data_mahasiswaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: data_mahasiswaInclude | null
    /**
     * Filter, which data_mahasiswas to fetch.
    **/
    where?: data_mahasiswaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of data_mahasiswas to fetch.
    **/
    orderBy?: Enumerable<data_mahasiswaOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing data_mahasiswas.
    **/
    cursor?: data_mahasiswaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` data_mahasiswas from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` data_mahasiswas.
    **/
    skip?: number
    distinct?: Enumerable<Data_mahasiswaScalarFieldEnum>
  }


  /**
   * data_mahasiswa create
   */
  export type data_mahasiswaCreateArgs = {
    /**
     * Select specific fields to fetch from the data_mahasiswa
    **/
    select?: data_mahasiswaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: data_mahasiswaInclude | null
    /**
     * The data needed to create a data_mahasiswa.
    **/
    data: XOR<data_mahasiswaCreateInput, data_mahasiswaUncheckedCreateInput>
  }


  /**
   * data_mahasiswa update
   */
  export type data_mahasiswaUpdateArgs = {
    /**
     * Select specific fields to fetch from the data_mahasiswa
    **/
    select?: data_mahasiswaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: data_mahasiswaInclude | null
    /**
     * The data needed to update a data_mahasiswa.
    **/
    data: XOR<data_mahasiswaUpdateInput, data_mahasiswaUncheckedUpdateInput>
    /**
     * Choose, which data_mahasiswa to update.
    **/
    where: data_mahasiswaWhereUniqueInput
  }


  /**
   * data_mahasiswa updateMany
   */
  export type data_mahasiswaUpdateManyArgs = {
    data: XOR<data_mahasiswaUpdateManyMutationInput, data_mahasiswaUncheckedUpdateManyInput>
    where?: data_mahasiswaWhereInput
  }


  /**
   * data_mahasiswa upsert
   */
  export type data_mahasiswaUpsertArgs = {
    /**
     * Select specific fields to fetch from the data_mahasiswa
    **/
    select?: data_mahasiswaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: data_mahasiswaInclude | null
    /**
     * The filter to search for the data_mahasiswa to update in case it exists.
    **/
    where: data_mahasiswaWhereUniqueInput
    /**
     * In case the data_mahasiswa found by the `where` argument doesn't exist, create a new data_mahasiswa with this data.
    **/
    create: XOR<data_mahasiswaCreateInput, data_mahasiswaUncheckedCreateInput>
    /**
     * In case the data_mahasiswa was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<data_mahasiswaUpdateInput, data_mahasiswaUncheckedUpdateInput>
  }


  /**
   * data_mahasiswa delete
   */
  export type data_mahasiswaDeleteArgs = {
    /**
     * Select specific fields to fetch from the data_mahasiswa
    **/
    select?: data_mahasiswaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: data_mahasiswaInclude | null
    /**
     * Filter which data_mahasiswa to delete.
    **/
    where: data_mahasiswaWhereUniqueInput
  }


  /**
   * data_mahasiswa deleteMany
   */
  export type data_mahasiswaDeleteManyArgs = {
    where?: data_mahasiswaWhereInput
  }


  /**
   * data_mahasiswa without action
   */
  export type data_mahasiswaArgs = {
    /**
     * Select specific fields to fetch from the data_mahasiswa
    **/
    select?: data_mahasiswaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: data_mahasiswaInclude | null
  }



  /**
   * Model logbook
   */


  export type AggregateLogbook = {
    count: LogbookCountAggregateOutputType | null
    avg: LogbookAvgAggregateOutputType | null
    sum: LogbookSumAggregateOutputType | null
    min: LogbookMinAggregateOutputType | null
    max: LogbookMaxAggregateOutputType | null
  }

  export type LogbookAvgAggregateOutputType = {
    id: number
    logbookId: number
  }

  export type LogbookSumAggregateOutputType = {
    id: number
    logbookId: number
  }

  export type LogbookMinAggregateOutputType = {
    id: number
    tanggal: Date | null
    kegiatan: string | null
    kendala: string | null
    solusi: string | null
    lampiran: string | null
    logbookId: number
  }

  export type LogbookMaxAggregateOutputType = {
    id: number
    tanggal: Date | null
    kegiatan: string | null
    kendala: string | null
    solusi: string | null
    lampiran: string | null
    logbookId: number
  }

  export type LogbookCountAggregateOutputType = {
    id: number
    tanggal: number | null
    kegiatan: number | null
    kendala: number | null
    solusi: number | null
    lampiran: number | null
    logbookId: number
    _all: number
  }


  export type LogbookAvgAggregateInputType = {
    id?: true
    logbookId?: true
  }

  export type LogbookSumAggregateInputType = {
    id?: true
    logbookId?: true
  }

  export type LogbookMinAggregateInputType = {
    id?: true
    tanggal?: true
    kegiatan?: true
    kendala?: true
    solusi?: true
    lampiran?: true
    logbookId?: true
  }

  export type LogbookMaxAggregateInputType = {
    id?: true
    tanggal?: true
    kegiatan?: true
    kendala?: true
    solusi?: true
    lampiran?: true
    logbookId?: true
  }

  export type LogbookCountAggregateInputType = {
    id?: true
    tanggal?: true
    kegiatan?: true
    kendala?: true
    solusi?: true
    lampiran?: true
    logbookId?: true
    _all?: true
  }

  export type LogbookAggregateArgs = {
    /**
     * Filter which logbook to aggregate.
    **/
    where?: logbookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logbooks to fetch.
    **/
    orderBy?: Enumerable<logbookOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: logbookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logbooks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logbooks.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned logbooks
    **/
    count?: true | LogbookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: LogbookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: LogbookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: LogbookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: LogbookMaxAggregateInputType
  }

  export type GetLogbookAggregateType<T extends LogbookAggregateArgs> = {
    [P in keyof T & keyof AggregateLogbook]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogbook[P]>
      : GetScalarType<T[P], AggregateLogbook[P]>
  }



  export type logbookSelect = {
    id?: boolean
    tanggal?: boolean
    kegiatan?: boolean
    kendala?: boolean
    solusi?: boolean
    lampiran?: boolean
    mhs_profil?: boolean | data_mahasiswaArgs
    logbookId?: boolean
  }

  export type logbookInclude = {
    mhs_profil?: boolean | data_mahasiswaArgs
  }

  export type logbookGetPayload<
    S extends boolean | null | undefined | logbookArgs,
    U = keyof S
      > = S extends true
        ? logbook
    : S extends undefined
    ? never
    : S extends logbookArgs | logbookFindManyArgs
    ?'include' extends U
    ? logbook  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'mhs_profil'
        ? data_mahasiswaGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof logbook ?logbook [P]
  : 
          P extends 'mhs_profil'
        ? data_mahasiswaGetPayload<S['select'][P]> : never
  } 
    : logbook
  : logbook


  type logbookCountArgs = Merge<
    Omit<logbookFindManyArgs, 'select' | 'include'> & {
      select?: LogbookCountAggregateInputType | true
    }
  >

  export interface logbookDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Logbook that matches the filter.
     * @param {logbookFindUniqueArgs} args - Arguments to find a Logbook
     * @example
     * // Get one Logbook
     * const logbook = await prisma.logbook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends logbookFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, logbookFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'logbook'> extends True ? CheckSelect<T, Prisma__logbookClient<logbook>, Prisma__logbookClient<logbookGetPayload<T>>> : CheckSelect<T, Prisma__logbookClient<logbook | null >, Prisma__logbookClient<logbookGetPayload<T> | null >>

    /**
     * Find the first Logbook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logbookFindFirstArgs} args - Arguments to find a Logbook
     * @example
     * // Get one Logbook
     * const logbook = await prisma.logbook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends logbookFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, logbookFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'logbook'> extends True ? CheckSelect<T, Prisma__logbookClient<logbook>, Prisma__logbookClient<logbookGetPayload<T>>> : CheckSelect<T, Prisma__logbookClient<logbook | null >, Prisma__logbookClient<logbookGetPayload<T> | null >>

    /**
     * Find zero or more Logbooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logbookFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logbooks
     * const logbooks = await prisma.logbook.findMany()
     * 
     * // Get first 10 Logbooks
     * const logbooks = await prisma.logbook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logbookWithIdOnly = await prisma.logbook.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends logbookFindManyArgs>(
      args?: SelectSubset<T, logbookFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<logbook>>, PrismaPromise<Array<logbookGetPayload<T>>>>

    /**
     * Create a Logbook.
     * @param {logbookCreateArgs} args - Arguments to create a Logbook.
     * @example
     * // Create one Logbook
     * const Logbook = await prisma.logbook.create({
     *   data: {
     *     // ... data to create a Logbook
     *   }
     * })
     * 
    **/
    create<T extends logbookCreateArgs>(
      args: SelectSubset<T, logbookCreateArgs>
    ): CheckSelect<T, Prisma__logbookClient<logbook>, Prisma__logbookClient<logbookGetPayload<T>>>

    /**
     * Delete a Logbook.
     * @param {logbookDeleteArgs} args - Arguments to delete one Logbook.
     * @example
     * // Delete one Logbook
     * const Logbook = await prisma.logbook.delete({
     *   where: {
     *     // ... filter to delete one Logbook
     *   }
     * })
     * 
    **/
    delete<T extends logbookDeleteArgs>(
      args: SelectSubset<T, logbookDeleteArgs>
    ): CheckSelect<T, Prisma__logbookClient<logbook>, Prisma__logbookClient<logbookGetPayload<T>>>

    /**
     * Update one Logbook.
     * @param {logbookUpdateArgs} args - Arguments to update one Logbook.
     * @example
     * // Update one Logbook
     * const logbook = await prisma.logbook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends logbookUpdateArgs>(
      args: SelectSubset<T, logbookUpdateArgs>
    ): CheckSelect<T, Prisma__logbookClient<logbook>, Prisma__logbookClient<logbookGetPayload<T>>>

    /**
     * Delete zero or more Logbooks.
     * @param {logbookDeleteManyArgs} args - Arguments to filter Logbooks to delete.
     * @example
     * // Delete a few Logbooks
     * const { count } = await prisma.logbook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends logbookDeleteManyArgs>(
      args?: SelectSubset<T, logbookDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logbooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logbookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logbooks
     * const logbook = await prisma.logbook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends logbookUpdateManyArgs>(
      args: SelectSubset<T, logbookUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Logbook.
     * @param {logbookUpsertArgs} args - Arguments to update or create a Logbook.
     * @example
     * // Update or create a Logbook
     * const logbook = await prisma.logbook.upsert({
     *   create: {
     *     // ... data to create a Logbook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Logbook we want to update
     *   }
     * })
    **/
    upsert<T extends logbookUpsertArgs>(
      args: SelectSubset<T, logbookUpsertArgs>
    ): CheckSelect<T, Prisma__logbookClient<logbook>, Prisma__logbookClient<logbookGetPayload<T>>>

    /**
     * Count the number of Logbooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logbookCountArgs} args - Arguments to filter Logbooks to count.
     * @example
     * // Count the number of Logbooks
     * const count = await prisma.logbook.count({
     *   where: {
     *     // ... the filter for the Logbooks we want to count
     *   }
     * })
    **/
    count<T extends logbookCountArgs>(
      args?: Subset<T, logbookCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogbookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Logbook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogbookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogbookAggregateArgs>(args: Subset<T, LogbookAggregateArgs>): PrismaPromise<GetLogbookAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for logbook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__logbookClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    mhs_profil<T extends data_mahasiswaArgs = {}>(args?: Subset<T, data_mahasiswaArgs>): CheckSelect<T, Prisma__data_mahasiswaClient<data_mahasiswa | null >, Prisma__data_mahasiswaClient<data_mahasiswaGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * logbook findUnique
   */
  export type logbookFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the logbook
    **/
    select?: logbookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: logbookInclude | null
    /**
     * Throw an Error if a logbook can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which logbook to fetch.
    **/
    where: logbookWhereUniqueInput
  }


  /**
   * logbook findFirst
   */
  export type logbookFindFirstArgs = {
    /**
     * Select specific fields to fetch from the logbook
    **/
    select?: logbookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: logbookInclude | null
    /**
     * Throw an Error if a logbook can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which logbook to fetch.
    **/
    where?: logbookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logbooks to fetch.
    **/
    orderBy?: Enumerable<logbookOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logbooks.
    **/
    cursor?: logbookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logbooks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logbooks.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logbooks.
    **/
    distinct?: Enumerable<LogbookScalarFieldEnum>
  }


  /**
   * logbook findMany
   */
  export type logbookFindManyArgs = {
    /**
     * Select specific fields to fetch from the logbook
    **/
    select?: logbookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: logbookInclude | null
    /**
     * Filter, which logbooks to fetch.
    **/
    where?: logbookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logbooks to fetch.
    **/
    orderBy?: Enumerable<logbookOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing logbooks.
    **/
    cursor?: logbookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logbooks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logbooks.
    **/
    skip?: number
    distinct?: Enumerable<LogbookScalarFieldEnum>
  }


  /**
   * logbook create
   */
  export type logbookCreateArgs = {
    /**
     * Select specific fields to fetch from the logbook
    **/
    select?: logbookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: logbookInclude | null
    /**
     * The data needed to create a logbook.
    **/
    data: XOR<logbookCreateInput, logbookUncheckedCreateInput>
  }


  /**
   * logbook update
   */
  export type logbookUpdateArgs = {
    /**
     * Select specific fields to fetch from the logbook
    **/
    select?: logbookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: logbookInclude | null
    /**
     * The data needed to update a logbook.
    **/
    data: XOR<logbookUpdateInput, logbookUncheckedUpdateInput>
    /**
     * Choose, which logbook to update.
    **/
    where: logbookWhereUniqueInput
  }


  /**
   * logbook updateMany
   */
  export type logbookUpdateManyArgs = {
    data: XOR<logbookUpdateManyMutationInput, logbookUncheckedUpdateManyInput>
    where?: logbookWhereInput
  }


  /**
   * logbook upsert
   */
  export type logbookUpsertArgs = {
    /**
     * Select specific fields to fetch from the logbook
    **/
    select?: logbookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: logbookInclude | null
    /**
     * The filter to search for the logbook to update in case it exists.
    **/
    where: logbookWhereUniqueInput
    /**
     * In case the logbook found by the `where` argument doesn't exist, create a new logbook with this data.
    **/
    create: XOR<logbookCreateInput, logbookUncheckedCreateInput>
    /**
     * In case the logbook was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<logbookUpdateInput, logbookUncheckedUpdateInput>
  }


  /**
   * logbook delete
   */
  export type logbookDeleteArgs = {
    /**
     * Select specific fields to fetch from the logbook
    **/
    select?: logbookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: logbookInclude | null
    /**
     * Filter which logbook to delete.
    **/
    where: logbookWhereUniqueInput
  }


  /**
   * logbook deleteMany
   */
  export type logbookDeleteManyArgs = {
    where?: logbookWhereInput
  }


  /**
   * logbook without action
   */
  export type logbookArgs = {
    /**
     * Select specific fields to fetch from the logbook
    **/
    select?: logbookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: logbookInclude | null
  }



  /**
   * Model login
   */


  export type AggregateLogin = {
    count: LoginCountAggregateOutputType | null
    avg: LoginAvgAggregateOutputType | null
    sum: LoginSumAggregateOutputType | null
    min: LoginMinAggregateOutputType | null
    max: LoginMaxAggregateOutputType | null
  }

  export type LoginAvgAggregateOutputType = {
    id: number
    userId: number
  }

  export type LoginSumAggregateOutputType = {
    id: number
    userId: number
  }

  export type LoginMinAggregateOutputType = {
    id: number
    user: string | null
    password: string | null
    role: string | null
    userId: number
  }

  export type LoginMaxAggregateOutputType = {
    id: number
    user: string | null
    password: string | null
    role: string | null
    userId: number
  }

  export type LoginCountAggregateOutputType = {
    id: number
    user: number | null
    password: number | null
    role: number | null
    userId: number
    _all: number
  }


  export type LoginAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LoginSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LoginMinAggregateInputType = {
    id?: true
    user?: true
    password?: true
    role?: true
    userId?: true
  }

  export type LoginMaxAggregateInputType = {
    id?: true
    user?: true
    password?: true
    role?: true
    userId?: true
  }

  export type LoginCountAggregateInputType = {
    id?: true
    user?: true
    password?: true
    role?: true
    userId?: true
    _all?: true
  }

  export type LoginAggregateArgs = {
    /**
     * Filter which login to aggregate.
    **/
    where?: loginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logins to fetch.
    **/
    orderBy?: Enumerable<loginOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: loginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logins from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logins.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned logins
    **/
    count?: true | LoginCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: LoginAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: LoginSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: LoginMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: LoginMaxAggregateInputType
  }

  export type GetLoginAggregateType<T extends LoginAggregateArgs> = {
    [P in keyof T & keyof AggregateLogin]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogin[P]>
      : GetScalarType<T[P], AggregateLogin[P]>
  }



  export type loginSelect = {
    id?: boolean
    user?: boolean
    password?: boolean
    role?: boolean
    mhs_profil?: boolean | data_mahasiswaArgs
    userId?: boolean
  }

  export type loginInclude = {
    mhs_profil?: boolean | data_mahasiswaArgs
  }

  export type loginGetPayload<
    S extends boolean | null | undefined | loginArgs,
    U = keyof S
      > = S extends true
        ? login
    : S extends undefined
    ? never
    : S extends loginArgs | loginFindManyArgs
    ?'include' extends U
    ? login  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'mhs_profil'
        ? data_mahasiswaGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof login ?login [P]
  : 
          P extends 'mhs_profil'
        ? data_mahasiswaGetPayload<S['select'][P]> : never
  } 
    : login
  : login


  type loginCountArgs = Merge<
    Omit<loginFindManyArgs, 'select' | 'include'> & {
      select?: LoginCountAggregateInputType | true
    }
  >

  export interface loginDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Login that matches the filter.
     * @param {loginFindUniqueArgs} args - Arguments to find a Login
     * @example
     * // Get one Login
     * const login = await prisma.login.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends loginFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, loginFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'login'> extends True ? CheckSelect<T, Prisma__loginClient<login>, Prisma__loginClient<loginGetPayload<T>>> : CheckSelect<T, Prisma__loginClient<login | null >, Prisma__loginClient<loginGetPayload<T> | null >>

    /**
     * Find the first Login that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {loginFindFirstArgs} args - Arguments to find a Login
     * @example
     * // Get one Login
     * const login = await prisma.login.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends loginFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, loginFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'login'> extends True ? CheckSelect<T, Prisma__loginClient<login>, Prisma__loginClient<loginGetPayload<T>>> : CheckSelect<T, Prisma__loginClient<login | null >, Prisma__loginClient<loginGetPayload<T> | null >>

    /**
     * Find zero or more Logins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {loginFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logins
     * const logins = await prisma.login.findMany()
     * 
     * // Get first 10 Logins
     * const logins = await prisma.login.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loginWithIdOnly = await prisma.login.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends loginFindManyArgs>(
      args?: SelectSubset<T, loginFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<login>>, PrismaPromise<Array<loginGetPayload<T>>>>

    /**
     * Create a Login.
     * @param {loginCreateArgs} args - Arguments to create a Login.
     * @example
     * // Create one Login
     * const Login = await prisma.login.create({
     *   data: {
     *     // ... data to create a Login
     *   }
     * })
     * 
    **/
    create<T extends loginCreateArgs>(
      args: SelectSubset<T, loginCreateArgs>
    ): CheckSelect<T, Prisma__loginClient<login>, Prisma__loginClient<loginGetPayload<T>>>

    /**
     * Delete a Login.
     * @param {loginDeleteArgs} args - Arguments to delete one Login.
     * @example
     * // Delete one Login
     * const Login = await prisma.login.delete({
     *   where: {
     *     // ... filter to delete one Login
     *   }
     * })
     * 
    **/
    delete<T extends loginDeleteArgs>(
      args: SelectSubset<T, loginDeleteArgs>
    ): CheckSelect<T, Prisma__loginClient<login>, Prisma__loginClient<loginGetPayload<T>>>

    /**
     * Update one Login.
     * @param {loginUpdateArgs} args - Arguments to update one Login.
     * @example
     * // Update one Login
     * const login = await prisma.login.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends loginUpdateArgs>(
      args: SelectSubset<T, loginUpdateArgs>
    ): CheckSelect<T, Prisma__loginClient<login>, Prisma__loginClient<loginGetPayload<T>>>

    /**
     * Delete zero or more Logins.
     * @param {loginDeleteManyArgs} args - Arguments to filter Logins to delete.
     * @example
     * // Delete a few Logins
     * const { count } = await prisma.login.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends loginDeleteManyArgs>(
      args?: SelectSubset<T, loginDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {loginUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logins
     * const login = await prisma.login.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends loginUpdateManyArgs>(
      args: SelectSubset<T, loginUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Login.
     * @param {loginUpsertArgs} args - Arguments to update or create a Login.
     * @example
     * // Update or create a Login
     * const login = await prisma.login.upsert({
     *   create: {
     *     // ... data to create a Login
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Login we want to update
     *   }
     * })
    **/
    upsert<T extends loginUpsertArgs>(
      args: SelectSubset<T, loginUpsertArgs>
    ): CheckSelect<T, Prisma__loginClient<login>, Prisma__loginClient<loginGetPayload<T>>>

    /**
     * Count the number of Logins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {loginCountArgs} args - Arguments to filter Logins to count.
     * @example
     * // Count the number of Logins
     * const count = await prisma.login.count({
     *   where: {
     *     // ... the filter for the Logins we want to count
     *   }
     * })
    **/
    count<T extends loginCountArgs>(
      args?: Subset<T, loginCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoginCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Login.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoginAggregateArgs>(args: Subset<T, LoginAggregateArgs>): PrismaPromise<GetLoginAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for login.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__loginClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    mhs_profil<T extends data_mahasiswaArgs = {}>(args?: Subset<T, data_mahasiswaArgs>): CheckSelect<T, Prisma__data_mahasiswaClient<data_mahasiswa | null >, Prisma__data_mahasiswaClient<data_mahasiswaGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * login findUnique
   */
  export type loginFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the login
    **/
    select?: loginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: loginInclude | null
    /**
     * Throw an Error if a login can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which login to fetch.
    **/
    where: loginWhereUniqueInput
  }


  /**
   * login findFirst
   */
  export type loginFindFirstArgs = {
    /**
     * Select specific fields to fetch from the login
    **/
    select?: loginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: loginInclude | null
    /**
     * Throw an Error if a login can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which login to fetch.
    **/
    where?: loginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logins to fetch.
    **/
    orderBy?: Enumerable<loginOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logins.
    **/
    cursor?: loginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logins from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logins.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logins.
    **/
    distinct?: Enumerable<LoginScalarFieldEnum>
  }


  /**
   * login findMany
   */
  export type loginFindManyArgs = {
    /**
     * Select specific fields to fetch from the login
    **/
    select?: loginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: loginInclude | null
    /**
     * Filter, which logins to fetch.
    **/
    where?: loginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logins to fetch.
    **/
    orderBy?: Enumerable<loginOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing logins.
    **/
    cursor?: loginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logins from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logins.
    **/
    skip?: number
    distinct?: Enumerable<LoginScalarFieldEnum>
  }


  /**
   * login create
   */
  export type loginCreateArgs = {
    /**
     * Select specific fields to fetch from the login
    **/
    select?: loginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: loginInclude | null
    /**
     * The data needed to create a login.
    **/
    data: XOR<loginCreateInput, loginUncheckedCreateInput>
  }


  /**
   * login update
   */
  export type loginUpdateArgs = {
    /**
     * Select specific fields to fetch from the login
    **/
    select?: loginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: loginInclude | null
    /**
     * The data needed to update a login.
    **/
    data: XOR<loginUpdateInput, loginUncheckedUpdateInput>
    /**
     * Choose, which login to update.
    **/
    where: loginWhereUniqueInput
  }


  /**
   * login updateMany
   */
  export type loginUpdateManyArgs = {
    data: XOR<loginUpdateManyMutationInput, loginUncheckedUpdateManyInput>
    where?: loginWhereInput
  }


  /**
   * login upsert
   */
  export type loginUpsertArgs = {
    /**
     * Select specific fields to fetch from the login
    **/
    select?: loginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: loginInclude | null
    /**
     * The filter to search for the login to update in case it exists.
    **/
    where: loginWhereUniqueInput
    /**
     * In case the login found by the `where` argument doesn't exist, create a new login with this data.
    **/
    create: XOR<loginCreateInput, loginUncheckedCreateInput>
    /**
     * In case the login was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<loginUpdateInput, loginUncheckedUpdateInput>
  }


  /**
   * login delete
   */
  export type loginDeleteArgs = {
    /**
     * Select specific fields to fetch from the login
    **/
    select?: loginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: loginInclude | null
    /**
     * Filter which login to delete.
    **/
    where: loginWhereUniqueInput
  }


  /**
   * login deleteMany
   */
  export type loginDeleteManyArgs = {
    where?: loginWhereInput
  }


  /**
   * login without action
   */
  export type loginArgs = {
    /**
     * Select specific fields to fetch from the login
    **/
    select?: loginSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: loginInclude | null
  }



  /**
   * Model profil_industri
   */


  export type AggregateProfil_industri = {
    count: Profil_industriCountAggregateOutputType | null
    avg: Profil_industriAvgAggregateOutputType | null
    sum: Profil_industriSumAggregateOutputType | null
    min: Profil_industriMinAggregateOutputType | null
    max: Profil_industriMaxAggregateOutputType | null
  }

  export type Profil_industriAvgAggregateOutputType = {
    id: number
  }

  export type Profil_industriSumAggregateOutputType = {
    id: number
  }

  export type Profil_industriMinAggregateOutputType = {
    id: number
    Nama_industri: string | null
    Alamat: string | null
    Contact_Person: string | null
    Status: string | null
  }

  export type Profil_industriMaxAggregateOutputType = {
    id: number
    Nama_industri: string | null
    Alamat: string | null
    Contact_Person: string | null
    Status: string | null
  }

  export type Profil_industriCountAggregateOutputType = {
    id: number
    Nama_industri: number | null
    Alamat: number | null
    Contact_Person: number | null
    Status: number | null
    _all: number
  }


  export type Profil_industriAvgAggregateInputType = {
    id?: true
  }

  export type Profil_industriSumAggregateInputType = {
    id?: true
  }

  export type Profil_industriMinAggregateInputType = {
    id?: true
    Nama_industri?: true
    Alamat?: true
    Contact_Person?: true
    Status?: true
  }

  export type Profil_industriMaxAggregateInputType = {
    id?: true
    Nama_industri?: true
    Alamat?: true
    Contact_Person?: true
    Status?: true
  }

  export type Profil_industriCountAggregateInputType = {
    id?: true
    Nama_industri?: true
    Alamat?: true
    Contact_Person?: true
    Status?: true
    _all?: true
  }

  export type Profil_industriAggregateArgs = {
    /**
     * Filter which profil_industri to aggregate.
    **/
    where?: profil_industriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profil_industris to fetch.
    **/
    orderBy?: Enumerable<profil_industriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: profil_industriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profil_industris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profil_industris.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned profil_industris
    **/
    count?: true | Profil_industriCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Profil_industriAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Profil_industriSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Profil_industriMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Profil_industriMaxAggregateInputType
  }

  export type GetProfil_industriAggregateType<T extends Profil_industriAggregateArgs> = {
    [P in keyof T & keyof AggregateProfil_industri]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfil_industri[P]>
      : GetScalarType<T[P], AggregateProfil_industri[P]>
  }



  export type profil_industriSelect = {
    id?: boolean
    Nama_industri?: boolean
    Alamat?: boolean
    Contact_Person?: boolean
    Status?: boolean
    mhs_daftar?: boolean | daftar_industriFindManyArgs
  }

  export type profil_industriInclude = {
    mhs_daftar?: boolean | daftar_industriFindManyArgs
  }

  export type profil_industriGetPayload<
    S extends boolean | null | undefined | profil_industriArgs,
    U = keyof S
      > = S extends true
        ? profil_industri
    : S extends undefined
    ? never
    : S extends profil_industriArgs | profil_industriFindManyArgs
    ?'include' extends U
    ? profil_industri  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'mhs_daftar'
        ? Array < daftar_industriGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof profil_industri ?profil_industri [P]
  : 
          P extends 'mhs_daftar'
        ? Array < daftar_industriGetPayload<S['select'][P]>>  : never
  } 
    : profil_industri
  : profil_industri


  type profil_industriCountArgs = Merge<
    Omit<profil_industriFindManyArgs, 'select' | 'include'> & {
      select?: Profil_industriCountAggregateInputType | true
    }
  >

  export interface profil_industriDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Profil_industri that matches the filter.
     * @param {profil_industriFindUniqueArgs} args - Arguments to find a Profil_industri
     * @example
     * // Get one Profil_industri
     * const profil_industri = await prisma.profil_industri.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends profil_industriFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, profil_industriFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'profil_industri'> extends True ? CheckSelect<T, Prisma__profil_industriClient<profil_industri>, Prisma__profil_industriClient<profil_industriGetPayload<T>>> : CheckSelect<T, Prisma__profil_industriClient<profil_industri | null >, Prisma__profil_industriClient<profil_industriGetPayload<T> | null >>

    /**
     * Find the first Profil_industri that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profil_industriFindFirstArgs} args - Arguments to find a Profil_industri
     * @example
     * // Get one Profil_industri
     * const profil_industri = await prisma.profil_industri.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends profil_industriFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, profil_industriFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'profil_industri'> extends True ? CheckSelect<T, Prisma__profil_industriClient<profil_industri>, Prisma__profil_industriClient<profil_industriGetPayload<T>>> : CheckSelect<T, Prisma__profil_industriClient<profil_industri | null >, Prisma__profil_industriClient<profil_industriGetPayload<T> | null >>

    /**
     * Find zero or more Profil_industris that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profil_industriFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profil_industris
     * const profil_industris = await prisma.profil_industri.findMany()
     * 
     * // Get first 10 Profil_industris
     * const profil_industris = await prisma.profil_industri.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profil_industriWithIdOnly = await prisma.profil_industri.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends profil_industriFindManyArgs>(
      args?: SelectSubset<T, profil_industriFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<profil_industri>>, PrismaPromise<Array<profil_industriGetPayload<T>>>>

    /**
     * Create a Profil_industri.
     * @param {profil_industriCreateArgs} args - Arguments to create a Profil_industri.
     * @example
     * // Create one Profil_industri
     * const Profil_industri = await prisma.profil_industri.create({
     *   data: {
     *     // ... data to create a Profil_industri
     *   }
     * })
     * 
    **/
    create<T extends profil_industriCreateArgs>(
      args: SelectSubset<T, profil_industriCreateArgs>
    ): CheckSelect<T, Prisma__profil_industriClient<profil_industri>, Prisma__profil_industriClient<profil_industriGetPayload<T>>>

    /**
     * Delete a Profil_industri.
     * @param {profil_industriDeleteArgs} args - Arguments to delete one Profil_industri.
     * @example
     * // Delete one Profil_industri
     * const Profil_industri = await prisma.profil_industri.delete({
     *   where: {
     *     // ... filter to delete one Profil_industri
     *   }
     * })
     * 
    **/
    delete<T extends profil_industriDeleteArgs>(
      args: SelectSubset<T, profil_industriDeleteArgs>
    ): CheckSelect<T, Prisma__profil_industriClient<profil_industri>, Prisma__profil_industriClient<profil_industriGetPayload<T>>>

    /**
     * Update one Profil_industri.
     * @param {profil_industriUpdateArgs} args - Arguments to update one Profil_industri.
     * @example
     * // Update one Profil_industri
     * const profil_industri = await prisma.profil_industri.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends profil_industriUpdateArgs>(
      args: SelectSubset<T, profil_industriUpdateArgs>
    ): CheckSelect<T, Prisma__profil_industriClient<profil_industri>, Prisma__profil_industriClient<profil_industriGetPayload<T>>>

    /**
     * Delete zero or more Profil_industris.
     * @param {profil_industriDeleteManyArgs} args - Arguments to filter Profil_industris to delete.
     * @example
     * // Delete a few Profil_industris
     * const { count } = await prisma.profil_industri.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends profil_industriDeleteManyArgs>(
      args?: SelectSubset<T, profil_industriDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profil_industris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profil_industriUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profil_industris
     * const profil_industri = await prisma.profil_industri.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends profil_industriUpdateManyArgs>(
      args: SelectSubset<T, profil_industriUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profil_industri.
     * @param {profil_industriUpsertArgs} args - Arguments to update or create a Profil_industri.
     * @example
     * // Update or create a Profil_industri
     * const profil_industri = await prisma.profil_industri.upsert({
     *   create: {
     *     // ... data to create a Profil_industri
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profil_industri we want to update
     *   }
     * })
    **/
    upsert<T extends profil_industriUpsertArgs>(
      args: SelectSubset<T, profil_industriUpsertArgs>
    ): CheckSelect<T, Prisma__profil_industriClient<profil_industri>, Prisma__profil_industriClient<profil_industriGetPayload<T>>>

    /**
     * Count the number of Profil_industris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {profil_industriCountArgs} args - Arguments to filter Profil_industris to count.
     * @example
     * // Count the number of Profil_industris
     * const count = await prisma.profil_industri.count({
     *   where: {
     *     // ... the filter for the Profil_industris we want to count
     *   }
     * })
    **/
    count<T extends profil_industriCountArgs>(
      args?: Subset<T, profil_industriCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Profil_industriCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profil_industri.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Profil_industriAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Profil_industriAggregateArgs>(args: Subset<T, Profil_industriAggregateArgs>): PrismaPromise<GetProfil_industriAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for profil_industri.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__profil_industriClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    mhs_daftar<T extends daftar_industriFindManyArgs = {}>(args?: Subset<T, daftar_industriFindManyArgs>): CheckSelect<T, PrismaPromise<Array<daftar_industri>>, PrismaPromise<Array<daftar_industriGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * profil_industri findUnique
   */
  export type profil_industriFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the profil_industri
    **/
    select?: profil_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: profil_industriInclude | null
    /**
     * Throw an Error if a profil_industri can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which profil_industri to fetch.
    **/
    where: profil_industriWhereUniqueInput
  }


  /**
   * profil_industri findFirst
   */
  export type profil_industriFindFirstArgs = {
    /**
     * Select specific fields to fetch from the profil_industri
    **/
    select?: profil_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: profil_industriInclude | null
    /**
     * Throw an Error if a profil_industri can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which profil_industri to fetch.
    **/
    where?: profil_industriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profil_industris to fetch.
    **/
    orderBy?: Enumerable<profil_industriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for profil_industris.
    **/
    cursor?: profil_industriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profil_industris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profil_industris.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of profil_industris.
    **/
    distinct?: Enumerable<Profil_industriScalarFieldEnum>
  }


  /**
   * profil_industri findMany
   */
  export type profil_industriFindManyArgs = {
    /**
     * Select specific fields to fetch from the profil_industri
    **/
    select?: profil_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: profil_industriInclude | null
    /**
     * Filter, which profil_industris to fetch.
    **/
    where?: profil_industriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of profil_industris to fetch.
    **/
    orderBy?: Enumerable<profil_industriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing profil_industris.
    **/
    cursor?: profil_industriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` profil_industris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` profil_industris.
    **/
    skip?: number
    distinct?: Enumerable<Profil_industriScalarFieldEnum>
  }


  /**
   * profil_industri create
   */
  export type profil_industriCreateArgs = {
    /**
     * Select specific fields to fetch from the profil_industri
    **/
    select?: profil_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: profil_industriInclude | null
    /**
     * The data needed to create a profil_industri.
    **/
    data: XOR<profil_industriCreateInput, profil_industriUncheckedCreateInput>
  }


  /**
   * profil_industri update
   */
  export type profil_industriUpdateArgs = {
    /**
     * Select specific fields to fetch from the profil_industri
    **/
    select?: profil_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: profil_industriInclude | null
    /**
     * The data needed to update a profil_industri.
    **/
    data: XOR<profil_industriUpdateInput, profil_industriUncheckedUpdateInput>
    /**
     * Choose, which profil_industri to update.
    **/
    where: profil_industriWhereUniqueInput
  }


  /**
   * profil_industri updateMany
   */
  export type profil_industriUpdateManyArgs = {
    data: XOR<profil_industriUpdateManyMutationInput, profil_industriUncheckedUpdateManyInput>
    where?: profil_industriWhereInput
  }


  /**
   * profil_industri upsert
   */
  export type profil_industriUpsertArgs = {
    /**
     * Select specific fields to fetch from the profil_industri
    **/
    select?: profil_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: profil_industriInclude | null
    /**
     * The filter to search for the profil_industri to update in case it exists.
    **/
    where: profil_industriWhereUniqueInput
    /**
     * In case the profil_industri found by the `where` argument doesn't exist, create a new profil_industri with this data.
    **/
    create: XOR<profil_industriCreateInput, profil_industriUncheckedCreateInput>
    /**
     * In case the profil_industri was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<profil_industriUpdateInput, profil_industriUncheckedUpdateInput>
  }


  /**
   * profil_industri delete
   */
  export type profil_industriDeleteArgs = {
    /**
     * Select specific fields to fetch from the profil_industri
    **/
    select?: profil_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: profil_industriInclude | null
    /**
     * Filter which profil_industri to delete.
    **/
    where: profil_industriWhereUniqueInput
  }


  /**
   * profil_industri deleteMany
   */
  export type profil_industriDeleteManyArgs = {
    where?: profil_industriWhereInput
  }


  /**
   * profil_industri without action
   */
  export type profil_industriArgs = {
    /**
     * Select specific fields to fetch from the profil_industri
    **/
    select?: profil_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: profil_industriInclude | null
  }



  /**
   * Model daftar_industri
   */


  export type AggregateDaftar_industri = {
    count: Daftar_industriCountAggregateOutputType | null
    avg: Daftar_industriAvgAggregateOutputType | null
    sum: Daftar_industriSumAggregateOutputType | null
    min: Daftar_industriMinAggregateOutputType | null
    max: Daftar_industriMaxAggregateOutputType | null
  }

  export type Daftar_industriAvgAggregateOutputType = {
    id: number
  }

  export type Daftar_industriSumAggregateOutputType = {
    id: number
  }

  export type Daftar_industriMinAggregateOutputType = {
    id: number
    Nama_industri: string | null
    NIM_ketua: string | null
    NIM_anggota1: string | null
    NIM_anggota2: string | null
    Status: string | null
    Surat_industri: string | null
    Durasi1: Date | null
    Durasi2: Date | null
    Dosen: string | null
    industriNama: string | null
  }

  export type Daftar_industriMaxAggregateOutputType = {
    id: number
    Nama_industri: string | null
    NIM_ketua: string | null
    NIM_anggota1: string | null
    NIM_anggota2: string | null
    Status: string | null
    Surat_industri: string | null
    Durasi1: Date | null
    Durasi2: Date | null
    Dosen: string | null
    industriNama: string | null
  }

  export type Daftar_industriCountAggregateOutputType = {
    id: number
    Nama_industri: number | null
    NIM_ketua: number | null
    NIM_anggota1: number | null
    NIM_anggota2: number | null
    Status: number | null
    Surat_industri: number | null
    Durasi1: number | null
    Durasi2: number | null
    Dosen: number | null
    industriNama: number | null
    _all: number
  }


  export type Daftar_industriAvgAggregateInputType = {
    id?: true
  }

  export type Daftar_industriSumAggregateInputType = {
    id?: true
  }

  export type Daftar_industriMinAggregateInputType = {
    id?: true
    Nama_industri?: true
    NIM_ketua?: true
    NIM_anggota1?: true
    NIM_anggota2?: true
    Status?: true
    Surat_industri?: true
    Durasi1?: true
    Durasi2?: true
    Dosen?: true
    industriNama?: true
  }

  export type Daftar_industriMaxAggregateInputType = {
    id?: true
    Nama_industri?: true
    NIM_ketua?: true
    NIM_anggota1?: true
    NIM_anggota2?: true
    Status?: true
    Surat_industri?: true
    Durasi1?: true
    Durasi2?: true
    Dosen?: true
    industriNama?: true
  }

  export type Daftar_industriCountAggregateInputType = {
    id?: true
    Nama_industri?: true
    NIM_ketua?: true
    NIM_anggota1?: true
    NIM_anggota2?: true
    Status?: true
    Surat_industri?: true
    Durasi1?: true
    Durasi2?: true
    Dosen?: true
    industriNama?: true
    _all?: true
  }

  export type Daftar_industriAggregateArgs = {
    /**
     * Filter which daftar_industri to aggregate.
    **/
    where?: daftar_industriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of daftar_industris to fetch.
    **/
    orderBy?: Enumerable<daftar_industriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: daftar_industriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` daftar_industris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` daftar_industris.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned daftar_industris
    **/
    count?: true | Daftar_industriCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Daftar_industriAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Daftar_industriSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Daftar_industriMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Daftar_industriMaxAggregateInputType
  }

  export type GetDaftar_industriAggregateType<T extends Daftar_industriAggregateArgs> = {
    [P in keyof T & keyof AggregateDaftar_industri]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDaftar_industri[P]>
      : GetScalarType<T[P], AggregateDaftar_industri[P]>
  }



  export type daftar_industriSelect = {
    id?: boolean
    Nama_industri?: boolean
    NIM_ketua?: boolean
    NIM_anggota1?: boolean
    NIM_anggota2?: boolean
    Status?: boolean
    Surat_industri?: boolean
    Durasi1?: boolean
    Durasi2?: boolean
    Dosen?: boolean
    industri?: boolean | profil_industriArgs
    industriNama?: boolean
  }

  export type daftar_industriInclude = {
    industri?: boolean | profil_industriArgs
  }

  export type daftar_industriGetPayload<
    S extends boolean | null | undefined | daftar_industriArgs,
    U = keyof S
      > = S extends true
        ? daftar_industri
    : S extends undefined
    ? never
    : S extends daftar_industriArgs | daftar_industriFindManyArgs
    ?'include' extends U
    ? daftar_industri  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'industri'
        ? profil_industriGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof daftar_industri ?daftar_industri [P]
  : 
          P extends 'industri'
        ? profil_industriGetPayload<S['select'][P]> : never
  } 
    : daftar_industri
  : daftar_industri


  type daftar_industriCountArgs = Merge<
    Omit<daftar_industriFindManyArgs, 'select' | 'include'> & {
      select?: Daftar_industriCountAggregateInputType | true
    }
  >

  export interface daftar_industriDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Daftar_industri that matches the filter.
     * @param {daftar_industriFindUniqueArgs} args - Arguments to find a Daftar_industri
     * @example
     * // Get one Daftar_industri
     * const daftar_industri = await prisma.daftar_industri.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends daftar_industriFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, daftar_industriFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'daftar_industri'> extends True ? CheckSelect<T, Prisma__daftar_industriClient<daftar_industri>, Prisma__daftar_industriClient<daftar_industriGetPayload<T>>> : CheckSelect<T, Prisma__daftar_industriClient<daftar_industri | null >, Prisma__daftar_industriClient<daftar_industriGetPayload<T> | null >>

    /**
     * Find the first Daftar_industri that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {daftar_industriFindFirstArgs} args - Arguments to find a Daftar_industri
     * @example
     * // Get one Daftar_industri
     * const daftar_industri = await prisma.daftar_industri.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends daftar_industriFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, daftar_industriFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'daftar_industri'> extends True ? CheckSelect<T, Prisma__daftar_industriClient<daftar_industri>, Prisma__daftar_industriClient<daftar_industriGetPayload<T>>> : CheckSelect<T, Prisma__daftar_industriClient<daftar_industri | null >, Prisma__daftar_industriClient<daftar_industriGetPayload<T> | null >>

    /**
     * Find zero or more Daftar_industris that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {daftar_industriFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Daftar_industris
     * const daftar_industris = await prisma.daftar_industri.findMany()
     * 
     * // Get first 10 Daftar_industris
     * const daftar_industris = await prisma.daftar_industri.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const daftar_industriWithIdOnly = await prisma.daftar_industri.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends daftar_industriFindManyArgs>(
      args?: SelectSubset<T, daftar_industriFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<daftar_industri>>, PrismaPromise<Array<daftar_industriGetPayload<T>>>>

    /**
     * Create a Daftar_industri.
     * @param {daftar_industriCreateArgs} args - Arguments to create a Daftar_industri.
     * @example
     * // Create one Daftar_industri
     * const Daftar_industri = await prisma.daftar_industri.create({
     *   data: {
     *     // ... data to create a Daftar_industri
     *   }
     * })
     * 
    **/
    create<T extends daftar_industriCreateArgs>(
      args: SelectSubset<T, daftar_industriCreateArgs>
    ): CheckSelect<T, Prisma__daftar_industriClient<daftar_industri>, Prisma__daftar_industriClient<daftar_industriGetPayload<T>>>

    /**
     * Delete a Daftar_industri.
     * @param {daftar_industriDeleteArgs} args - Arguments to delete one Daftar_industri.
     * @example
     * // Delete one Daftar_industri
     * const Daftar_industri = await prisma.daftar_industri.delete({
     *   where: {
     *     // ... filter to delete one Daftar_industri
     *   }
     * })
     * 
    **/
    delete<T extends daftar_industriDeleteArgs>(
      args: SelectSubset<T, daftar_industriDeleteArgs>
    ): CheckSelect<T, Prisma__daftar_industriClient<daftar_industri>, Prisma__daftar_industriClient<daftar_industriGetPayload<T>>>

    /**
     * Update one Daftar_industri.
     * @param {daftar_industriUpdateArgs} args - Arguments to update one Daftar_industri.
     * @example
     * // Update one Daftar_industri
     * const daftar_industri = await prisma.daftar_industri.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends daftar_industriUpdateArgs>(
      args: SelectSubset<T, daftar_industriUpdateArgs>
    ): CheckSelect<T, Prisma__daftar_industriClient<daftar_industri>, Prisma__daftar_industriClient<daftar_industriGetPayload<T>>>

    /**
     * Delete zero or more Daftar_industris.
     * @param {daftar_industriDeleteManyArgs} args - Arguments to filter Daftar_industris to delete.
     * @example
     * // Delete a few Daftar_industris
     * const { count } = await prisma.daftar_industri.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends daftar_industriDeleteManyArgs>(
      args?: SelectSubset<T, daftar_industriDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Daftar_industris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {daftar_industriUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Daftar_industris
     * const daftar_industri = await prisma.daftar_industri.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends daftar_industriUpdateManyArgs>(
      args: SelectSubset<T, daftar_industriUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Daftar_industri.
     * @param {daftar_industriUpsertArgs} args - Arguments to update or create a Daftar_industri.
     * @example
     * // Update or create a Daftar_industri
     * const daftar_industri = await prisma.daftar_industri.upsert({
     *   create: {
     *     // ... data to create a Daftar_industri
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Daftar_industri we want to update
     *   }
     * })
    **/
    upsert<T extends daftar_industriUpsertArgs>(
      args: SelectSubset<T, daftar_industriUpsertArgs>
    ): CheckSelect<T, Prisma__daftar_industriClient<daftar_industri>, Prisma__daftar_industriClient<daftar_industriGetPayload<T>>>

    /**
     * Count the number of Daftar_industris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {daftar_industriCountArgs} args - Arguments to filter Daftar_industris to count.
     * @example
     * // Count the number of Daftar_industris
     * const count = await prisma.daftar_industri.count({
     *   where: {
     *     // ... the filter for the Daftar_industris we want to count
     *   }
     * })
    **/
    count<T extends daftar_industriCountArgs>(
      args?: Subset<T, daftar_industriCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Daftar_industriCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Daftar_industri.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Daftar_industriAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Daftar_industriAggregateArgs>(args: Subset<T, Daftar_industriAggregateArgs>): PrismaPromise<GetDaftar_industriAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for daftar_industri.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__daftar_industriClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    industri<T extends profil_industriArgs = {}>(args?: Subset<T, profil_industriArgs>): CheckSelect<T, Prisma__profil_industriClient<profil_industri | null >, Prisma__profil_industriClient<profil_industriGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * daftar_industri findUnique
   */
  export type daftar_industriFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the daftar_industri
    **/
    select?: daftar_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: daftar_industriInclude | null
    /**
     * Throw an Error if a daftar_industri can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which daftar_industri to fetch.
    **/
    where: daftar_industriWhereUniqueInput
  }


  /**
   * daftar_industri findFirst
   */
  export type daftar_industriFindFirstArgs = {
    /**
     * Select specific fields to fetch from the daftar_industri
    **/
    select?: daftar_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: daftar_industriInclude | null
    /**
     * Throw an Error if a daftar_industri can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which daftar_industri to fetch.
    **/
    where?: daftar_industriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of daftar_industris to fetch.
    **/
    orderBy?: Enumerable<daftar_industriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for daftar_industris.
    **/
    cursor?: daftar_industriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` daftar_industris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` daftar_industris.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of daftar_industris.
    **/
    distinct?: Enumerable<Daftar_industriScalarFieldEnum>
  }


  /**
   * daftar_industri findMany
   */
  export type daftar_industriFindManyArgs = {
    /**
     * Select specific fields to fetch from the daftar_industri
    **/
    select?: daftar_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: daftar_industriInclude | null
    /**
     * Filter, which daftar_industris to fetch.
    **/
    where?: daftar_industriWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of daftar_industris to fetch.
    **/
    orderBy?: Enumerable<daftar_industriOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing daftar_industris.
    **/
    cursor?: daftar_industriWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` daftar_industris from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` daftar_industris.
    **/
    skip?: number
    distinct?: Enumerable<Daftar_industriScalarFieldEnum>
  }


  /**
   * daftar_industri create
   */
  export type daftar_industriCreateArgs = {
    /**
     * Select specific fields to fetch from the daftar_industri
    **/
    select?: daftar_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: daftar_industriInclude | null
    /**
     * The data needed to create a daftar_industri.
    **/
    data: XOR<daftar_industriCreateInput, daftar_industriUncheckedCreateInput>
  }


  /**
   * daftar_industri update
   */
  export type daftar_industriUpdateArgs = {
    /**
     * Select specific fields to fetch from the daftar_industri
    **/
    select?: daftar_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: daftar_industriInclude | null
    /**
     * The data needed to update a daftar_industri.
    **/
    data: XOR<daftar_industriUpdateInput, daftar_industriUncheckedUpdateInput>
    /**
     * Choose, which daftar_industri to update.
    **/
    where: daftar_industriWhereUniqueInput
  }


  /**
   * daftar_industri updateMany
   */
  export type daftar_industriUpdateManyArgs = {
    data: XOR<daftar_industriUpdateManyMutationInput, daftar_industriUncheckedUpdateManyInput>
    where?: daftar_industriWhereInput
  }


  /**
   * daftar_industri upsert
   */
  export type daftar_industriUpsertArgs = {
    /**
     * Select specific fields to fetch from the daftar_industri
    **/
    select?: daftar_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: daftar_industriInclude | null
    /**
     * The filter to search for the daftar_industri to update in case it exists.
    **/
    where: daftar_industriWhereUniqueInput
    /**
     * In case the daftar_industri found by the `where` argument doesn't exist, create a new daftar_industri with this data.
    **/
    create: XOR<daftar_industriCreateInput, daftar_industriUncheckedCreateInput>
    /**
     * In case the daftar_industri was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<daftar_industriUpdateInput, daftar_industriUncheckedUpdateInput>
  }


  /**
   * daftar_industri delete
   */
  export type daftar_industriDeleteArgs = {
    /**
     * Select specific fields to fetch from the daftar_industri
    **/
    select?: daftar_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: daftar_industriInclude | null
    /**
     * Filter which daftar_industri to delete.
    **/
    where: daftar_industriWhereUniqueInput
  }


  /**
   * daftar_industri deleteMany
   */
  export type daftar_industriDeleteManyArgs = {
    where?: daftar_industriWhereInput
  }


  /**
   * daftar_industri without action
   */
  export type daftar_industriArgs = {
    /**
     * Select specific fields to fetch from the daftar_industri
    **/
    select?: daftar_industriSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: daftar_industriInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Data_mahasiswaScalarFieldEnum: {
    id: 'id',
    nama: 'nama',
    nim: 'nim',
    email: 'email',
    tanggal_lahir: 'tanggal_lahir',
    No_telp: 'No_telp',
    alamat: 'alamat',
    Status: 'Status'
  };

  export type Data_mahasiswaScalarFieldEnum = (typeof Data_mahasiswaScalarFieldEnum)[keyof typeof Data_mahasiswaScalarFieldEnum]


  export const LogbookScalarFieldEnum: {
    id: 'id',
    tanggal: 'tanggal',
    kegiatan: 'kegiatan',
    kendala: 'kendala',
    solusi: 'solusi',
    lampiran: 'lampiran',
    logbookId: 'logbookId'
  };

  export type LogbookScalarFieldEnum = (typeof LogbookScalarFieldEnum)[keyof typeof LogbookScalarFieldEnum]


  export const LoginScalarFieldEnum: {
    id: 'id',
    user: 'user',
    password: 'password',
    role: 'role',
    userId: 'userId'
  };

  export type LoginScalarFieldEnum = (typeof LoginScalarFieldEnum)[keyof typeof LoginScalarFieldEnum]


  export const Profil_industriScalarFieldEnum: {
    id: 'id',
    Nama_industri: 'Nama_industri',
    Alamat: 'Alamat',
    Contact_Person: 'Contact_Person',
    Status: 'Status'
  };

  export type Profil_industriScalarFieldEnum = (typeof Profil_industriScalarFieldEnum)[keyof typeof Profil_industriScalarFieldEnum]


  export const Daftar_industriScalarFieldEnum: {
    id: 'id',
    Nama_industri: 'Nama_industri',
    NIM_ketua: 'NIM_ketua',
    NIM_anggota1: 'NIM_anggota1',
    NIM_anggota2: 'NIM_anggota2',
    Status: 'Status',
    Surat_industri: 'Surat_industri',
    Durasi1: 'Durasi1',
    Durasi2: 'Durasi2',
    Dosen: 'Dosen',
    industriNama: 'industriNama'
  };

  export type Daftar_industriScalarFieldEnum = (typeof Daftar_industriScalarFieldEnum)[keyof typeof Daftar_industriScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type data_mahasiswaWhereInput = {
    AND?: Enumerable<data_mahasiswaWhereInput>
    OR?: Enumerable<data_mahasiswaWhereInput>
    NOT?: Enumerable<data_mahasiswaWhereInput>
    id?: IntFilter | number
    nama?: StringFilter | string
    nim?: StringFilter | string
    email?: StringFilter | string
    tanggal_lahir?: DateTimeFilter | Date | string
    No_telp?: StringFilter | string
    alamat?: StringFilter | string
    Status?: StringFilter | string
    data_mahasiswa?: LoginListRelationFilter
    data_logbook?: LogbookListRelationFilter
  }

  export type data_mahasiswaOrderByInput = {
    id?: SortOrder
    nama?: SortOrder
    nim?: SortOrder
    email?: SortOrder
    tanggal_lahir?: SortOrder
    No_telp?: SortOrder
    alamat?: SortOrder
    Status?: SortOrder
  }

  export type data_mahasiswaWhereUniqueInput = {
    id?: number
  }

  export type logbookWhereInput = {
    AND?: Enumerable<logbookWhereInput>
    OR?: Enumerable<logbookWhereInput>
    NOT?: Enumerable<logbookWhereInput>
    id?: IntFilter | number
    tanggal?: DateTimeFilter | Date | string
    kegiatan?: StringFilter | string
    kendala?: StringFilter | string
    solusi?: StringFilter | string
    lampiran?: StringFilter | string
    mhs_profil?: XOR<Data_mahasiswaRelationFilter, data_mahasiswaWhereInput>
    logbookId?: IntFilter | number
  }

  export type logbookOrderByInput = {
    id?: SortOrder
    tanggal?: SortOrder
    kegiatan?: SortOrder
    kendala?: SortOrder
    solusi?: SortOrder
    lampiran?: SortOrder
    mhs_profil?: data_mahasiswaOrderByInput
    logbookId?: SortOrder
  }

  export type logbookWhereUniqueInput = {
    id?: number
  }

  export type loginWhereInput = {
    AND?: Enumerable<loginWhereInput>
    OR?: Enumerable<loginWhereInput>
    NOT?: Enumerable<loginWhereInput>
    id?: IntFilter | number
    user?: StringFilter | string
    password?: StringFilter | string
    role?: StringFilter | string
    mhs_profil?: XOR<Data_mahasiswaRelationFilter, data_mahasiswaWhereInput>
    userId?: IntFilter | number
  }

  export type loginOrderByInput = {
    id?: SortOrder
    user?: SortOrder
    password?: SortOrder
    role?: SortOrder
    mhs_profil?: data_mahasiswaOrderByInput
    userId?: SortOrder
  }

  export type loginWhereUniqueInput = {
    id?: number
  }

  export type profil_industriWhereInput = {
    AND?: Enumerable<profil_industriWhereInput>
    OR?: Enumerable<profil_industriWhereInput>
    NOT?: Enumerable<profil_industriWhereInput>
    id?: IntFilter | number
    Nama_industri?: StringFilter | string
    Alamat?: StringFilter | string
    Contact_Person?: StringFilter | string
    Status?: StringFilter | string
    mhs_daftar?: Daftar_industriListRelationFilter
  }

  export type profil_industriOrderByInput = {
    id?: SortOrder
    Nama_industri?: SortOrder
    Alamat?: SortOrder
    Contact_Person?: SortOrder
    Status?: SortOrder
  }

  export type profil_industriWhereUniqueInput = {
    id?: number
    Nama_industri?: string
  }

  export type daftar_industriWhereInput = {
    AND?: Enumerable<daftar_industriWhereInput>
    OR?: Enumerable<daftar_industriWhereInput>
    NOT?: Enumerable<daftar_industriWhereInput>
    id?: IntFilter | number
    Nama_industri?: StringFilter | string
    NIM_ketua?: StringFilter | string
    NIM_anggota1?: StringFilter | string
    NIM_anggota2?: StringFilter | string
    Status?: StringFilter | string
    Surat_industri?: StringFilter | string
    Durasi1?: DateTimeFilter | Date | string
    Durasi2?: DateTimeFilter | Date | string
    Dosen?: StringFilter | string
    industri?: XOR<Profil_industriRelationFilter, profil_industriWhereInput>
    industriNama?: StringFilter | string
  }

  export type daftar_industriOrderByInput = {
    id?: SortOrder
    Nama_industri?: SortOrder
    NIM_ketua?: SortOrder
    NIM_anggota1?: SortOrder
    NIM_anggota2?: SortOrder
    Status?: SortOrder
    Surat_industri?: SortOrder
    Durasi1?: SortOrder
    Durasi2?: SortOrder
    Dosen?: SortOrder
    industri?: profil_industriOrderByInput
    industriNama?: SortOrder
  }

  export type daftar_industriWhereUniqueInput = {
    id?: number
    NIM_ketua?: string
    NIM_anggota1?: string
    NIM_anggota2?: string
  }

  export type data_mahasiswaCreateInput = {
    nama: string
    nim: string
    email: string
    tanggal_lahir: Date | string
    No_telp: string
    alamat: string
    Status: string
    data_mahasiswa?: loginCreateNestedManyWithoutMhs_profilInput
    data_logbook?: logbookCreateNestedManyWithoutMhs_profilInput
  }

  export type data_mahasiswaUncheckedCreateInput = {
    id?: number
    nama: string
    nim: string
    email: string
    tanggal_lahir: Date | string
    No_telp: string
    alamat: string
    Status: string
    data_mahasiswa?: loginUncheckedCreateNestedManyWithoutMhs_profilInput
    data_logbook?: logbookUncheckedCreateNestedManyWithoutMhs_profilInput
  }

  export type data_mahasiswaUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    No_telp?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    data_mahasiswa?: loginUpdateManyWithoutMhs_profilInput
    data_logbook?: logbookUpdateManyWithoutMhs_profilInput
  }

  export type data_mahasiswaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    No_telp?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    data_mahasiswa?: loginUncheckedUpdateManyWithoutMhs_profilInput
    data_logbook?: logbookUncheckedUpdateManyWithoutMhs_profilInput
  }

  export type data_mahasiswaUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    No_telp?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
  }

  export type data_mahasiswaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    No_telp?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
  }

  export type logbookCreateInput = {
    tanggal: Date | string
    kegiatan: string
    kendala: string
    solusi: string
    lampiran: string
    mhs_profil: data_mahasiswaCreateNestedOneWithoutData_logbookInput
  }

  export type logbookUncheckedCreateInput = {
    id?: number
    tanggal: Date | string
    kegiatan: string
    kendala: string
    solusi: string
    lampiran: string
    logbookId: number
  }

  export type logbookUpdateInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    kegiatan?: StringFieldUpdateOperationsInput | string
    kendala?: StringFieldUpdateOperationsInput | string
    solusi?: StringFieldUpdateOperationsInput | string
    lampiran?: StringFieldUpdateOperationsInput | string
    mhs_profil?: data_mahasiswaUpdateOneRequiredWithoutData_logbookInput
  }

  export type logbookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    kegiatan?: StringFieldUpdateOperationsInput | string
    kendala?: StringFieldUpdateOperationsInput | string
    solusi?: StringFieldUpdateOperationsInput | string
    lampiran?: StringFieldUpdateOperationsInput | string
    logbookId?: IntFieldUpdateOperationsInput | number
  }

  export type logbookUpdateManyMutationInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    kegiatan?: StringFieldUpdateOperationsInput | string
    kendala?: StringFieldUpdateOperationsInput | string
    solusi?: StringFieldUpdateOperationsInput | string
    lampiran?: StringFieldUpdateOperationsInput | string
  }

  export type logbookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    kegiatan?: StringFieldUpdateOperationsInput | string
    kendala?: StringFieldUpdateOperationsInput | string
    solusi?: StringFieldUpdateOperationsInput | string
    lampiran?: StringFieldUpdateOperationsInput | string
    logbookId?: IntFieldUpdateOperationsInput | number
  }

  export type loginCreateInput = {
    user: string
    password: string
    role: string
    mhs_profil: data_mahasiswaCreateNestedOneWithoutData_mahasiswaInput
  }

  export type loginUncheckedCreateInput = {
    id?: number
    user: string
    password: string
    role: string
    userId: number
  }

  export type loginUpdateInput = {
    user?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    mhs_profil?: data_mahasiswaUpdateOneRequiredWithoutData_mahasiswaInput
  }

  export type loginUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type loginUpdateManyMutationInput = {
    user?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type loginUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type profil_industriCreateInput = {
    Nama_industri: string
    Alamat: string
    Contact_Person: string
    Status: string
    mhs_daftar?: daftar_industriCreateNestedManyWithoutIndustriInput
  }

  export type profil_industriUncheckedCreateInput = {
    id?: number
    Nama_industri: string
    Alamat: string
    Contact_Person: string
    Status: string
    mhs_daftar?: daftar_industriUncheckedCreateNestedManyWithoutIndustriInput
  }

  export type profil_industriUpdateInput = {
    Nama_industri?: StringFieldUpdateOperationsInput | string
    Alamat?: StringFieldUpdateOperationsInput | string
    Contact_Person?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    mhs_daftar?: daftar_industriUpdateManyWithoutIndustriInput
  }

  export type profil_industriUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nama_industri?: StringFieldUpdateOperationsInput | string
    Alamat?: StringFieldUpdateOperationsInput | string
    Contact_Person?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    mhs_daftar?: daftar_industriUncheckedUpdateManyWithoutIndustriInput
  }

  export type profil_industriUpdateManyMutationInput = {
    Nama_industri?: StringFieldUpdateOperationsInput | string
    Alamat?: StringFieldUpdateOperationsInput | string
    Contact_Person?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
  }

  export type profil_industriUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nama_industri?: StringFieldUpdateOperationsInput | string
    Alamat?: StringFieldUpdateOperationsInput | string
    Contact_Person?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
  }

  export type daftar_industriCreateInput = {
    Nama_industri: string
    NIM_ketua: string
    NIM_anggota1: string
    NIM_anggota2: string
    Status: string
    Surat_industri: string
    Durasi1: Date | string
    Durasi2: Date | string
    Dosen: string
    industri: profil_industriCreateNestedOneWithoutMhs_daftarInput
  }

  export type daftar_industriUncheckedCreateInput = {
    id?: number
    Nama_industri: string
    NIM_ketua: string
    NIM_anggota1: string
    NIM_anggota2: string
    Status: string
    Surat_industri: string
    Durasi1: Date | string
    Durasi2: Date | string
    Dosen: string
    industriNama: string
  }

  export type daftar_industriUpdateInput = {
    Nama_industri?: StringFieldUpdateOperationsInput | string
    NIM_ketua?: StringFieldUpdateOperationsInput | string
    NIM_anggota1?: StringFieldUpdateOperationsInput | string
    NIM_anggota2?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    Surat_industri?: StringFieldUpdateOperationsInput | string
    Durasi1?: DateTimeFieldUpdateOperationsInput | Date | string
    Durasi2?: DateTimeFieldUpdateOperationsInput | Date | string
    Dosen?: StringFieldUpdateOperationsInput | string
    industri?: profil_industriUpdateOneRequiredWithoutMhs_daftarInput
  }

  export type daftar_industriUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nama_industri?: StringFieldUpdateOperationsInput | string
    NIM_ketua?: StringFieldUpdateOperationsInput | string
    NIM_anggota1?: StringFieldUpdateOperationsInput | string
    NIM_anggota2?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    Surat_industri?: StringFieldUpdateOperationsInput | string
    Durasi1?: DateTimeFieldUpdateOperationsInput | Date | string
    Durasi2?: DateTimeFieldUpdateOperationsInput | Date | string
    Dosen?: StringFieldUpdateOperationsInput | string
    industriNama?: StringFieldUpdateOperationsInput | string
  }

  export type daftar_industriUpdateManyMutationInput = {
    Nama_industri?: StringFieldUpdateOperationsInput | string
    NIM_ketua?: StringFieldUpdateOperationsInput | string
    NIM_anggota1?: StringFieldUpdateOperationsInput | string
    NIM_anggota2?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    Surat_industri?: StringFieldUpdateOperationsInput | string
    Durasi1?: DateTimeFieldUpdateOperationsInput | Date | string
    Durasi2?: DateTimeFieldUpdateOperationsInput | Date | string
    Dosen?: StringFieldUpdateOperationsInput | string
  }

  export type daftar_industriUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nama_industri?: StringFieldUpdateOperationsInput | string
    NIM_ketua?: StringFieldUpdateOperationsInput | string
    NIM_anggota1?: StringFieldUpdateOperationsInput | string
    NIM_anggota2?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    Surat_industri?: StringFieldUpdateOperationsInput | string
    Durasi1?: DateTimeFieldUpdateOperationsInput | Date | string
    Durasi2?: DateTimeFieldUpdateOperationsInput | Date | string
    Dosen?: StringFieldUpdateOperationsInput | string
    industriNama?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type LoginListRelationFilter = {
    every?: loginWhereInput
    some?: loginWhereInput
    none?: loginWhereInput
  }

  export type LogbookListRelationFilter = {
    every?: logbookWhereInput
    some?: logbookWhereInput
    none?: logbookWhereInput
  }

  export type Data_mahasiswaRelationFilter = {
    is?: data_mahasiswaWhereInput
    isNot?: data_mahasiswaWhereInput
  }

  export type Daftar_industriListRelationFilter = {
    every?: daftar_industriWhereInput
    some?: daftar_industriWhereInput
    none?: daftar_industriWhereInput
  }

  export type Profil_industriRelationFilter = {
    is?: profil_industriWhereInput
    isNot?: profil_industriWhereInput
  }

  export type loginCreateNestedManyWithoutMhs_profilInput = {
    create?: XOR<Enumerable<loginCreateWithoutMhs_profilInput>, Enumerable<loginUncheckedCreateWithoutMhs_profilInput>>
    connectOrCreate?: Enumerable<loginCreateOrConnectWithoutMhs_profilInput>
    connect?: Enumerable<loginWhereUniqueInput>
  }

  export type logbookCreateNestedManyWithoutMhs_profilInput = {
    create?: XOR<Enumerable<logbookCreateWithoutMhs_profilInput>, Enumerable<logbookUncheckedCreateWithoutMhs_profilInput>>
    connectOrCreate?: Enumerable<logbookCreateOrConnectWithoutMhs_profilInput>
    connect?: Enumerable<logbookWhereUniqueInput>
  }

  export type loginUncheckedCreateNestedManyWithoutMhs_profilInput = {
    create?: XOR<Enumerable<loginCreateWithoutMhs_profilInput>, Enumerable<loginUncheckedCreateWithoutMhs_profilInput>>
    connectOrCreate?: Enumerable<loginCreateOrConnectWithoutMhs_profilInput>
    connect?: Enumerable<loginWhereUniqueInput>
  }

  export type logbookUncheckedCreateNestedManyWithoutMhs_profilInput = {
    create?: XOR<Enumerable<logbookCreateWithoutMhs_profilInput>, Enumerable<logbookUncheckedCreateWithoutMhs_profilInput>>
    connectOrCreate?: Enumerable<logbookCreateOrConnectWithoutMhs_profilInput>
    connect?: Enumerable<logbookWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type loginUpdateManyWithoutMhs_profilInput = {
    create?: XOR<Enumerable<loginCreateWithoutMhs_profilInput>, Enumerable<loginUncheckedCreateWithoutMhs_profilInput>>
    connectOrCreate?: Enumerable<loginCreateOrConnectWithoutMhs_profilInput>
    upsert?: Enumerable<loginUpsertWithWhereUniqueWithoutMhs_profilInput>
    connect?: Enumerable<loginWhereUniqueInput>
    set?: Enumerable<loginWhereUniqueInput>
    disconnect?: Enumerable<loginWhereUniqueInput>
    delete?: Enumerable<loginWhereUniqueInput>
    update?: Enumerable<loginUpdateWithWhereUniqueWithoutMhs_profilInput>
    updateMany?: Enumerable<loginUpdateManyWithWhereWithoutMhs_profilInput>
    deleteMany?: Enumerable<loginScalarWhereInput>
  }

  export type logbookUpdateManyWithoutMhs_profilInput = {
    create?: XOR<Enumerable<logbookCreateWithoutMhs_profilInput>, Enumerable<logbookUncheckedCreateWithoutMhs_profilInput>>
    connectOrCreate?: Enumerable<logbookCreateOrConnectWithoutMhs_profilInput>
    upsert?: Enumerable<logbookUpsertWithWhereUniqueWithoutMhs_profilInput>
    connect?: Enumerable<logbookWhereUniqueInput>
    set?: Enumerable<logbookWhereUniqueInput>
    disconnect?: Enumerable<logbookWhereUniqueInput>
    delete?: Enumerable<logbookWhereUniqueInput>
    update?: Enumerable<logbookUpdateWithWhereUniqueWithoutMhs_profilInput>
    updateMany?: Enumerable<logbookUpdateManyWithWhereWithoutMhs_profilInput>
    deleteMany?: Enumerable<logbookScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type loginUncheckedUpdateManyWithoutMhs_profilInput = {
    create?: XOR<Enumerable<loginCreateWithoutMhs_profilInput>, Enumerable<loginUncheckedCreateWithoutMhs_profilInput>>
    connectOrCreate?: Enumerable<loginCreateOrConnectWithoutMhs_profilInput>
    upsert?: Enumerable<loginUpsertWithWhereUniqueWithoutMhs_profilInput>
    connect?: Enumerable<loginWhereUniqueInput>
    set?: Enumerable<loginWhereUniqueInput>
    disconnect?: Enumerable<loginWhereUniqueInput>
    delete?: Enumerable<loginWhereUniqueInput>
    update?: Enumerable<loginUpdateWithWhereUniqueWithoutMhs_profilInput>
    updateMany?: Enumerable<loginUpdateManyWithWhereWithoutMhs_profilInput>
    deleteMany?: Enumerable<loginScalarWhereInput>
  }

  export type logbookUncheckedUpdateManyWithoutMhs_profilInput = {
    create?: XOR<Enumerable<logbookCreateWithoutMhs_profilInput>, Enumerable<logbookUncheckedCreateWithoutMhs_profilInput>>
    connectOrCreate?: Enumerable<logbookCreateOrConnectWithoutMhs_profilInput>
    upsert?: Enumerable<logbookUpsertWithWhereUniqueWithoutMhs_profilInput>
    connect?: Enumerable<logbookWhereUniqueInput>
    set?: Enumerable<logbookWhereUniqueInput>
    disconnect?: Enumerable<logbookWhereUniqueInput>
    delete?: Enumerable<logbookWhereUniqueInput>
    update?: Enumerable<logbookUpdateWithWhereUniqueWithoutMhs_profilInput>
    updateMany?: Enumerable<logbookUpdateManyWithWhereWithoutMhs_profilInput>
    deleteMany?: Enumerable<logbookScalarWhereInput>
  }

  export type data_mahasiswaCreateNestedOneWithoutData_logbookInput = {
    create?: XOR<data_mahasiswaCreateWithoutData_logbookInput, data_mahasiswaUncheckedCreateWithoutData_logbookInput>
    connectOrCreate?: data_mahasiswaCreateOrConnectWithoutData_logbookInput
    connect?: data_mahasiswaWhereUniqueInput
  }

  export type data_mahasiswaUpdateOneRequiredWithoutData_logbookInput = {
    create?: XOR<data_mahasiswaCreateWithoutData_logbookInput, data_mahasiswaUncheckedCreateWithoutData_logbookInput>
    connectOrCreate?: data_mahasiswaCreateOrConnectWithoutData_logbookInput
    upsert?: data_mahasiswaUpsertWithoutData_logbookInput
    connect?: data_mahasiswaWhereUniqueInput
    update?: XOR<data_mahasiswaUpdateWithoutData_logbookInput, data_mahasiswaUncheckedUpdateWithoutData_logbookInput>
  }

  export type data_mahasiswaCreateNestedOneWithoutData_mahasiswaInput = {
    create?: XOR<data_mahasiswaCreateWithoutData_mahasiswaInput, data_mahasiswaUncheckedCreateWithoutData_mahasiswaInput>
    connectOrCreate?: data_mahasiswaCreateOrConnectWithoutData_mahasiswaInput
    connect?: data_mahasiswaWhereUniqueInput
  }

  export type data_mahasiswaUpdateOneRequiredWithoutData_mahasiswaInput = {
    create?: XOR<data_mahasiswaCreateWithoutData_mahasiswaInput, data_mahasiswaUncheckedCreateWithoutData_mahasiswaInput>
    connectOrCreate?: data_mahasiswaCreateOrConnectWithoutData_mahasiswaInput
    upsert?: data_mahasiswaUpsertWithoutData_mahasiswaInput
    connect?: data_mahasiswaWhereUniqueInput
    update?: XOR<data_mahasiswaUpdateWithoutData_mahasiswaInput, data_mahasiswaUncheckedUpdateWithoutData_mahasiswaInput>
  }

  export type daftar_industriCreateNestedManyWithoutIndustriInput = {
    create?: XOR<Enumerable<daftar_industriCreateWithoutIndustriInput>, Enumerable<daftar_industriUncheckedCreateWithoutIndustriInput>>
    connectOrCreate?: Enumerable<daftar_industriCreateOrConnectWithoutIndustriInput>
    connect?: Enumerable<daftar_industriWhereUniqueInput>
  }

  export type daftar_industriUncheckedCreateNestedManyWithoutIndustriInput = {
    create?: XOR<Enumerable<daftar_industriCreateWithoutIndustriInput>, Enumerable<daftar_industriUncheckedCreateWithoutIndustriInput>>
    connectOrCreate?: Enumerable<daftar_industriCreateOrConnectWithoutIndustriInput>
    connect?: Enumerable<daftar_industriWhereUniqueInput>
  }

  export type daftar_industriUpdateManyWithoutIndustriInput = {
    create?: XOR<Enumerable<daftar_industriCreateWithoutIndustriInput>, Enumerable<daftar_industriUncheckedCreateWithoutIndustriInput>>
    connectOrCreate?: Enumerable<daftar_industriCreateOrConnectWithoutIndustriInput>
    upsert?: Enumerable<daftar_industriUpsertWithWhereUniqueWithoutIndustriInput>
    connect?: Enumerable<daftar_industriWhereUniqueInput>
    set?: Enumerable<daftar_industriWhereUniqueInput>
    disconnect?: Enumerable<daftar_industriWhereUniqueInput>
    delete?: Enumerable<daftar_industriWhereUniqueInput>
    update?: Enumerable<daftar_industriUpdateWithWhereUniqueWithoutIndustriInput>
    updateMany?: Enumerable<daftar_industriUpdateManyWithWhereWithoutIndustriInput>
    deleteMany?: Enumerable<daftar_industriScalarWhereInput>
  }

  export type daftar_industriUncheckedUpdateManyWithoutIndustriInput = {
    create?: XOR<Enumerable<daftar_industriCreateWithoutIndustriInput>, Enumerable<daftar_industriUncheckedCreateWithoutIndustriInput>>
    connectOrCreate?: Enumerable<daftar_industriCreateOrConnectWithoutIndustriInput>
    upsert?: Enumerable<daftar_industriUpsertWithWhereUniqueWithoutIndustriInput>
    connect?: Enumerable<daftar_industriWhereUniqueInput>
    set?: Enumerable<daftar_industriWhereUniqueInput>
    disconnect?: Enumerable<daftar_industriWhereUniqueInput>
    delete?: Enumerable<daftar_industriWhereUniqueInput>
    update?: Enumerable<daftar_industriUpdateWithWhereUniqueWithoutIndustriInput>
    updateMany?: Enumerable<daftar_industriUpdateManyWithWhereWithoutIndustriInput>
    deleteMany?: Enumerable<daftar_industriScalarWhereInput>
  }

  export type profil_industriCreateNestedOneWithoutMhs_daftarInput = {
    create?: XOR<profil_industriCreateWithoutMhs_daftarInput, profil_industriUncheckedCreateWithoutMhs_daftarInput>
    connectOrCreate?: profil_industriCreateOrConnectWithoutMhs_daftarInput
    connect?: profil_industriWhereUniqueInput
  }

  export type profil_industriUpdateOneRequiredWithoutMhs_daftarInput = {
    create?: XOR<profil_industriCreateWithoutMhs_daftarInput, profil_industriUncheckedCreateWithoutMhs_daftarInput>
    connectOrCreate?: profil_industriCreateOrConnectWithoutMhs_daftarInput
    upsert?: profil_industriUpsertWithoutMhs_daftarInput
    connect?: profil_industriWhereUniqueInput
    update?: XOR<profil_industriUpdateWithoutMhs_daftarInput, profil_industriUncheckedUpdateWithoutMhs_daftarInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type loginCreateWithoutMhs_profilInput = {
    user: string
    password: string
    role: string
  }

  export type loginUncheckedCreateWithoutMhs_profilInput = {
    id?: number
    user: string
    password: string
    role: string
  }

  export type loginCreateOrConnectWithoutMhs_profilInput = {
    where: loginWhereUniqueInput
    create: XOR<loginCreateWithoutMhs_profilInput, loginUncheckedCreateWithoutMhs_profilInput>
  }

  export type logbookCreateWithoutMhs_profilInput = {
    tanggal: Date | string
    kegiatan: string
    kendala: string
    solusi: string
    lampiran: string
  }

  export type logbookUncheckedCreateWithoutMhs_profilInput = {
    id?: number
    tanggal: Date | string
    kegiatan: string
    kendala: string
    solusi: string
    lampiran: string
  }

  export type logbookCreateOrConnectWithoutMhs_profilInput = {
    where: logbookWhereUniqueInput
    create: XOR<logbookCreateWithoutMhs_profilInput, logbookUncheckedCreateWithoutMhs_profilInput>
  }

  export type loginUpsertWithWhereUniqueWithoutMhs_profilInput = {
    where: loginWhereUniqueInput
    update: XOR<loginUpdateWithoutMhs_profilInput, loginUncheckedUpdateWithoutMhs_profilInput>
    create: XOR<loginCreateWithoutMhs_profilInput, loginUncheckedCreateWithoutMhs_profilInput>
  }

  export type loginUpdateWithWhereUniqueWithoutMhs_profilInput = {
    where: loginWhereUniqueInput
    data: XOR<loginUpdateWithoutMhs_profilInput, loginUncheckedUpdateWithoutMhs_profilInput>
  }

  export type loginUpdateManyWithWhereWithoutMhs_profilInput = {
    where: loginScalarWhereInput
    data: XOR<loginUpdateManyMutationInput, loginUncheckedUpdateManyWithoutData_mahasiswaInput>
  }

  export type loginScalarWhereInput = {
    AND?: Enumerable<loginScalarWhereInput>
    OR?: Enumerable<loginScalarWhereInput>
    NOT?: Enumerable<loginScalarWhereInput>
    id?: IntFilter | number
    user?: StringFilter | string
    password?: StringFilter | string
    role?: StringFilter | string
    userId?: IntFilter | number
  }

  export type logbookUpsertWithWhereUniqueWithoutMhs_profilInput = {
    where: logbookWhereUniqueInput
    update: XOR<logbookUpdateWithoutMhs_profilInput, logbookUncheckedUpdateWithoutMhs_profilInput>
    create: XOR<logbookCreateWithoutMhs_profilInput, logbookUncheckedCreateWithoutMhs_profilInput>
  }

  export type logbookUpdateWithWhereUniqueWithoutMhs_profilInput = {
    where: logbookWhereUniqueInput
    data: XOR<logbookUpdateWithoutMhs_profilInput, logbookUncheckedUpdateWithoutMhs_profilInput>
  }

  export type logbookUpdateManyWithWhereWithoutMhs_profilInput = {
    where: logbookScalarWhereInput
    data: XOR<logbookUpdateManyMutationInput, logbookUncheckedUpdateManyWithoutData_logbookInput>
  }

  export type logbookScalarWhereInput = {
    AND?: Enumerable<logbookScalarWhereInput>
    OR?: Enumerable<logbookScalarWhereInput>
    NOT?: Enumerable<logbookScalarWhereInput>
    id?: IntFilter | number
    tanggal?: DateTimeFilter | Date | string
    kegiatan?: StringFilter | string
    kendala?: StringFilter | string
    solusi?: StringFilter | string
    lampiran?: StringFilter | string
    logbookId?: IntFilter | number
  }

  export type data_mahasiswaCreateWithoutData_logbookInput = {
    nama: string
    nim: string
    email: string
    tanggal_lahir: Date | string
    No_telp: string
    alamat: string
    Status: string
    data_mahasiswa?: loginCreateNestedManyWithoutMhs_profilInput
  }

  export type data_mahasiswaUncheckedCreateWithoutData_logbookInput = {
    id?: number
    nama: string
    nim: string
    email: string
    tanggal_lahir: Date | string
    No_telp: string
    alamat: string
    Status: string
    data_mahasiswa?: loginUncheckedCreateNestedManyWithoutMhs_profilInput
  }

  export type data_mahasiswaCreateOrConnectWithoutData_logbookInput = {
    where: data_mahasiswaWhereUniqueInput
    create: XOR<data_mahasiswaCreateWithoutData_logbookInput, data_mahasiswaUncheckedCreateWithoutData_logbookInput>
  }

  export type data_mahasiswaUpsertWithoutData_logbookInput = {
    update: XOR<data_mahasiswaUpdateWithoutData_logbookInput, data_mahasiswaUncheckedUpdateWithoutData_logbookInput>
    create: XOR<data_mahasiswaCreateWithoutData_logbookInput, data_mahasiswaUncheckedCreateWithoutData_logbookInput>
  }

  export type data_mahasiswaUpdateWithoutData_logbookInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    No_telp?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    data_mahasiswa?: loginUpdateManyWithoutMhs_profilInput
  }

  export type data_mahasiswaUncheckedUpdateWithoutData_logbookInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    No_telp?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    data_mahasiswa?: loginUncheckedUpdateManyWithoutMhs_profilInput
  }

  export type data_mahasiswaCreateWithoutData_mahasiswaInput = {
    nama: string
    nim: string
    email: string
    tanggal_lahir: Date | string
    No_telp: string
    alamat: string
    Status: string
    data_logbook?: logbookCreateNestedManyWithoutMhs_profilInput
  }

  export type data_mahasiswaUncheckedCreateWithoutData_mahasiswaInput = {
    id?: number
    nama: string
    nim: string
    email: string
    tanggal_lahir: Date | string
    No_telp: string
    alamat: string
    Status: string
    data_logbook?: logbookUncheckedCreateNestedManyWithoutMhs_profilInput
  }

  export type data_mahasiswaCreateOrConnectWithoutData_mahasiswaInput = {
    where: data_mahasiswaWhereUniqueInput
    create: XOR<data_mahasiswaCreateWithoutData_mahasiswaInput, data_mahasiswaUncheckedCreateWithoutData_mahasiswaInput>
  }

  export type data_mahasiswaUpsertWithoutData_mahasiswaInput = {
    update: XOR<data_mahasiswaUpdateWithoutData_mahasiswaInput, data_mahasiswaUncheckedUpdateWithoutData_mahasiswaInput>
    create: XOR<data_mahasiswaCreateWithoutData_mahasiswaInput, data_mahasiswaUncheckedCreateWithoutData_mahasiswaInput>
  }

  export type data_mahasiswaUpdateWithoutData_mahasiswaInput = {
    nama?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    No_telp?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    data_logbook?: logbookUpdateManyWithoutMhs_profilInput
  }

  export type data_mahasiswaUncheckedUpdateWithoutData_mahasiswaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    nim?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    tanggal_lahir?: DateTimeFieldUpdateOperationsInput | Date | string
    No_telp?: StringFieldUpdateOperationsInput | string
    alamat?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    data_logbook?: logbookUncheckedUpdateManyWithoutMhs_profilInput
  }

  export type daftar_industriCreateWithoutIndustriInput = {
    Nama_industri: string
    NIM_ketua: string
    NIM_anggota1: string
    NIM_anggota2: string
    Status: string
    Surat_industri: string
    Durasi1: Date | string
    Durasi2: Date | string
    Dosen: string
  }

  export type daftar_industriUncheckedCreateWithoutIndustriInput = {
    id?: number
    Nama_industri: string
    NIM_ketua: string
    NIM_anggota1: string
    NIM_anggota2: string
    Status: string
    Surat_industri: string
    Durasi1: Date | string
    Durasi2: Date | string
    Dosen: string
  }

  export type daftar_industriCreateOrConnectWithoutIndustriInput = {
    where: daftar_industriWhereUniqueInput
    create: XOR<daftar_industriCreateWithoutIndustriInput, daftar_industriUncheckedCreateWithoutIndustriInput>
  }

  export type daftar_industriUpsertWithWhereUniqueWithoutIndustriInput = {
    where: daftar_industriWhereUniqueInput
    update: XOR<daftar_industriUpdateWithoutIndustriInput, daftar_industriUncheckedUpdateWithoutIndustriInput>
    create: XOR<daftar_industriCreateWithoutIndustriInput, daftar_industriUncheckedCreateWithoutIndustriInput>
  }

  export type daftar_industriUpdateWithWhereUniqueWithoutIndustriInput = {
    where: daftar_industriWhereUniqueInput
    data: XOR<daftar_industriUpdateWithoutIndustriInput, daftar_industriUncheckedUpdateWithoutIndustriInput>
  }

  export type daftar_industriUpdateManyWithWhereWithoutIndustriInput = {
    where: daftar_industriScalarWhereInput
    data: XOR<daftar_industriUpdateManyMutationInput, daftar_industriUncheckedUpdateManyWithoutMhs_daftarInput>
  }

  export type daftar_industriScalarWhereInput = {
    AND?: Enumerable<daftar_industriScalarWhereInput>
    OR?: Enumerable<daftar_industriScalarWhereInput>
    NOT?: Enumerable<daftar_industriScalarWhereInput>
    id?: IntFilter | number
    Nama_industri?: StringFilter | string
    NIM_ketua?: StringFilter | string
    NIM_anggota1?: StringFilter | string
    NIM_anggota2?: StringFilter | string
    Status?: StringFilter | string
    Surat_industri?: StringFilter | string
    Durasi1?: DateTimeFilter | Date | string
    Durasi2?: DateTimeFilter | Date | string
    Dosen?: StringFilter | string
    industriNama?: StringFilter | string
  }

  export type profil_industriCreateWithoutMhs_daftarInput = {
    Nama_industri: string
    Alamat: string
    Contact_Person: string
    Status: string
  }

  export type profil_industriUncheckedCreateWithoutMhs_daftarInput = {
    id?: number
    Nama_industri: string
    Alamat: string
    Contact_Person: string
    Status: string
  }

  export type profil_industriCreateOrConnectWithoutMhs_daftarInput = {
    where: profil_industriWhereUniqueInput
    create: XOR<profil_industriCreateWithoutMhs_daftarInput, profil_industriUncheckedCreateWithoutMhs_daftarInput>
  }

  export type profil_industriUpsertWithoutMhs_daftarInput = {
    update: XOR<profil_industriUpdateWithoutMhs_daftarInput, profil_industriUncheckedUpdateWithoutMhs_daftarInput>
    create: XOR<profil_industriCreateWithoutMhs_daftarInput, profil_industriUncheckedCreateWithoutMhs_daftarInput>
  }

  export type profil_industriUpdateWithoutMhs_daftarInput = {
    Nama_industri?: StringFieldUpdateOperationsInput | string
    Alamat?: StringFieldUpdateOperationsInput | string
    Contact_Person?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
  }

  export type profil_industriUncheckedUpdateWithoutMhs_daftarInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nama_industri?: StringFieldUpdateOperationsInput | string
    Alamat?: StringFieldUpdateOperationsInput | string
    Contact_Person?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
  }

  export type loginUpdateWithoutMhs_profilInput = {
    user?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type loginUncheckedUpdateWithoutMhs_profilInput = {
    id?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type loginUncheckedUpdateManyWithoutData_mahasiswaInput = {
    id?: IntFieldUpdateOperationsInput | number
    user?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type logbookUpdateWithoutMhs_profilInput = {
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    kegiatan?: StringFieldUpdateOperationsInput | string
    kendala?: StringFieldUpdateOperationsInput | string
    solusi?: StringFieldUpdateOperationsInput | string
    lampiran?: StringFieldUpdateOperationsInput | string
  }

  export type logbookUncheckedUpdateWithoutMhs_profilInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    kegiatan?: StringFieldUpdateOperationsInput | string
    kendala?: StringFieldUpdateOperationsInput | string
    solusi?: StringFieldUpdateOperationsInput | string
    lampiran?: StringFieldUpdateOperationsInput | string
  }

  export type logbookUncheckedUpdateManyWithoutData_logbookInput = {
    id?: IntFieldUpdateOperationsInput | number
    tanggal?: DateTimeFieldUpdateOperationsInput | Date | string
    kegiatan?: StringFieldUpdateOperationsInput | string
    kendala?: StringFieldUpdateOperationsInput | string
    solusi?: StringFieldUpdateOperationsInput | string
    lampiran?: StringFieldUpdateOperationsInput | string
  }

  export type daftar_industriUpdateWithoutIndustriInput = {
    Nama_industri?: StringFieldUpdateOperationsInput | string
    NIM_ketua?: StringFieldUpdateOperationsInput | string
    NIM_anggota1?: StringFieldUpdateOperationsInput | string
    NIM_anggota2?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    Surat_industri?: StringFieldUpdateOperationsInput | string
    Durasi1?: DateTimeFieldUpdateOperationsInput | Date | string
    Durasi2?: DateTimeFieldUpdateOperationsInput | Date | string
    Dosen?: StringFieldUpdateOperationsInput | string
  }

  export type daftar_industriUncheckedUpdateWithoutIndustriInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nama_industri?: StringFieldUpdateOperationsInput | string
    NIM_ketua?: StringFieldUpdateOperationsInput | string
    NIM_anggota1?: StringFieldUpdateOperationsInput | string
    NIM_anggota2?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    Surat_industri?: StringFieldUpdateOperationsInput | string
    Durasi1?: DateTimeFieldUpdateOperationsInput | Date | string
    Durasi2?: DateTimeFieldUpdateOperationsInput | Date | string
    Dosen?: StringFieldUpdateOperationsInput | string
  }

  export type daftar_industriUncheckedUpdateManyWithoutMhs_daftarInput = {
    id?: IntFieldUpdateOperationsInput | number
    Nama_industri?: StringFieldUpdateOperationsInput | string
    NIM_ketua?: StringFieldUpdateOperationsInput | string
    NIM_anggota1?: StringFieldUpdateOperationsInput | string
    NIM_anggota2?: StringFieldUpdateOperationsInput | string
    Status?: StringFieldUpdateOperationsInput | string
    Surat_industri?: StringFieldUpdateOperationsInput | string
    Durasi1?: DateTimeFieldUpdateOperationsInput | Date | string
    Durasi2?: DateTimeFieldUpdateOperationsInput | Date | string
    Dosen?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}